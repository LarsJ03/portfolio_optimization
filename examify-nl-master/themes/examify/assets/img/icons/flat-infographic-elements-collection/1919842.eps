%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Infographic Element Collection 2 up-01.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 12/20/18
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Infographic Element Collection 2 up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-12-20T19:28:58+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-12-20T19:28:58+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-12-20T19:28:58+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9RZJDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqF1DVNN06IS39zHbRseKGVgvI+Cg9T7DIk&#xA;gCy2YsM8hqAJKTTefvL0bcVeWUfzIhp/w3HMGXaeId5djHsbOegHxVbTzv5duGCmcwseglUqP+CF&#xA;VH35KHaOGXWvewydk549L9yeRyRyIHjYOjbqykEEexGZoIIsOulEg0V2FDsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirFfP8A55tvK2mqyBZtTuKi0t26bdZH&#xA;pvxX8f1RJp2XZnZx1M+6A5n9D5/1bWdU1i+a81C4e5uXOzN0A/lRRso9hlZe6wYIYo8MBQekaL5a&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:11541bb6-45b0-4eb5-bac1-c6f379458172</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:11541bb6-45b0-4eb5-bac1-c6f379458172</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:02b00318-bfbe-9946-a233-74936e09a77a</stRef:instanceID>
            <stRef:documentID>xmp.did:63973f4a-e4f2-4f3e-8814-2f2d9035fea1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:11541bb6-45b0-4eb5-bac1-c6f379458172</stEvt:instanceID>
                  <stEvt:when>2018-12-20T19:28:58+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>499.999987</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 8</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=202 B=122</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>254</xmpG:red>
                           <xmpG:green>202</xmpG:green>
                           <xmpG:blue>122</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=150 B=99</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>150</xmpG:green>
                           <xmpG:blue>99</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=22 G=216 B=216</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>22</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>216</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=191 B=180 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>62</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>180</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=172 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>172</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=76 B=136</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>136</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=71 B=116 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>116</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 4</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=191 B=180</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>62</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>180</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=71 B=116</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>116</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Freepik logo</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=183 B=198</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=251 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>251</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0154421 .00189212 .00241093 0 cmyk
f
92.3586 59.8802 mo
98.3868 75.106 li
87.0851 78.7595 78.8018 89.1333 78.2469 101.514 cv
61.8759 102.242 li
62.1245 82.6347 74.7846 66.0194 92.3586 59.8802 cv
cp
.11313 .869688 .333989 .000488289 cmyk
f
90.259 126.452 mo
78.2203 137.785 li
68.2236 129.44 61.867 116.886 61.867 102.845 cv
61.867 102.646 61.867 102.441 61.8759 102.242 cv
78.2469 101.514 li
78.2248 101.953 78.2159 102.397 78.2159 102.845 cv
78.2159 112.554 82.9612 121.152 90.259 126.452 cv
cp
0 .85156 .162356 0 cmyk
f
99.9537 131.042 mo
96.9309 147.143 li
89.9349 145.5 83.556 142.242 78.2203 137.785 cv
90.259 126.452 li
93.1354 128.543 96.4114 130.119 99.9537 131.042 cv
cp
.76437 .0889906 .320897 0 cmyk
f
133.557 115.665 mo
146.781 125.595 li
138.911 139.197 124.209 148.345 107.367 148.345 cv
103.776 148.345 100.282 147.928 96.9309 147.143 cv
99.9537 131.042 li
102.32 131.668 104.806 131.997 107.367 131.997 cv
118.869 131.997 128.812 125.338 133.557 115.665 cv
cp
.623468 0 .234043 0 cmyk
f
147.527 81.445 mo
150.936 87.8239 152.867 95.1082 152.867 102.845 cv
152.867 111.133 150.652 118.901 146.781 125.595 cv
133.557 115.665 li
135.453 111.799 136.518 107.449 136.518 102.845 cv
136.518 96.8749 134.725 91.3218 131.644 86.7007 cv
147.527 81.445 li
cp
0 .219608 .596918 0 cmyk
f
147.527 81.445 mo
131.644 86.7007 li
126.419 78.8616 117.497 73.6945 107.367 73.6945 cv
104.233 73.6945 101.215 74.1872 98.3868 75.106 cv
92.3586 59.8802 li
97.0595 58.2377 102.107 57.3455 107.367 57.3455 cv
124.759 57.3455 139.874 67.1025 147.527 81.445 cv
cp
0 .493324 .647425 0 cmyk
f
310.288 140.974 mo
298.087 140.974 li
298.087 89.9802 li
310.288 89.9802 li
310.288 140.974 li
cp
0 .219608 .596918 0 cmyk
f
268.835 140.974 mo
256.634 140.974 li
256.634 113.817 li
268.835 113.817 li
268.835 140.974 li
cp
.11313 .869688 .333989 .000488289 cmyk
f
248.108 140.974 mo
235.907 140.974 li
235.907 123.031 li
248.108 123.031 li
248.108 140.974 li
cp
.623468 0 .234043 0 cmyk
f
227.382 140.974 mo
215.18 140.974 li
215.18 129.323 li
227.382 129.323 li
227.382 140.974 li
cp
0 .85156 .162356 0 cmyk
f
206.655 140.974 mo
194.454 140.974 li
194.454 133.182 li
206.655 133.182 li
206.655 140.974 li
cp
.76437 .0889906 .320897 0 cmyk
f
289.562 140.974 mo
277.36 140.974 li
277.36 103.086 li
289.562 103.086 li
289.562 140.974 li
cp
0 .493324 .647425 0 cmyk
f
190.66 125.585 mo
189.966 125.585 189.561 125.572 189.468 125.568 cv
189.587 122.424 li
189.737 122.432 204.864 122.905 226.32 116.588 cv
246.101 110.764 275.472 97.8061 303.054 69.1465 cv
305.321 71.3279 li
277.215 100.533 247.255 113.723 227.071 119.646 cv
208.38 125.132 194.678 125.585 190.66 125.585 cv
cp
.169497 .120851 .124178 0 cmyk
f
310.152 64.7173 mo
294.224 68.0292 li
306.841 80.6461 li
310.152 64.7173 li
cp
f
141.817 281.746 mo
149.463 273.42 154.134 262.319 154.134 250.124 cv
154.134 246.008 153.598 242.019 152.6 238.216 cv
111.125 251.054 li
141.817 281.746 li
cp
.623468 0 .234043 0 cmyk
f
107.824 253.409 mo
86.342 291.896 li
92.6644 295.084 99.8027 296.891 107.367 296.891 cv
119.562 296.891 130.663 292.22 138.988 284.574 cv
107.824 253.409 li
cp
.76437 .0889906 .320897 0 cmyk
f
111.125 199.657 mo
111.125 241.546 li
140.747 211.924 li
132.879 204.699 122.531 200.138 111.125 199.657 cv
cp
0 .493324 .647425 0 cmyk
f
151.416 234.396 mo
149.292 228.45 146.003 223.06 141.817 218.502 cv
114.495 245.825 li
151.416 234.396 li
cp
.11313 .869688 .333989 .000488289 cmyk
f
82.8478 289.948 mo
105.367 249.604 li
105.367 203.407 li
80.4669 204.456 60.5997 224.966 60.5997 250.124 cv
60.5997 266.96 69.4998 281.713 82.8478 289.948 cv
cp
0 .219608 .596918 0 cmyk
f
249.878 293.074 mo
225.175 293.074 205.078 272.977 205.078 248.274 cv
208.078 248.274 li
208.078 271.323 226.829 290.074 249.878 290.074 cv
249.878 293.074 li
cp
.169497 .120851 .124178 0 cmyk
f
249.878 299.074 mo
249.878 284.074 li
269.618 284.074 285.678 268.015 285.678 248.274 cv
285.678 228.534 269.618 212.475 249.878 212.475 cv
230.138 212.475 214.078 228.534 214.078 248.274 cv
199.078 248.274 li
199.078 220.263 221.867 197.475 249.878 197.475 cv
277.889 197.475 300.678 220.263 300.678 248.274 cv
300.678 276.285 277.889 299.074 249.878 299.074 cv
cp
.76437 .0889906 .320897 0 cmyk
f
249.878 299.074 mo
249.878 284.074 li
269.618 284.074 285.678 268.015 285.678 248.274 cv
285.678 228.534 269.618 212.475 249.878 212.475 cv
237.541 212.475 226.227 218.706 219.612 229.144 cv
206.942 221.114 li
216.323 206.312 232.373 197.475 249.878 197.475 cv
277.889 197.475 300.678 220.263 300.678 248.274 cv
300.678 276.285 277.889 299.074 249.878 299.074 cv
cp
0 .493324 .647425 0 cmyk
f
249.878 299.074 mo
249.878 284.074 li
269.618 284.074 285.678 268.015 285.678 248.274 cv
285.678 232.565 275.178 218.458 260.145 213.967 cv
264.438 199.595 li
285.776 205.969 300.678 225.986 300.678 248.274 cv
300.678 276.285 277.889 299.074 249.878 299.074 cv
cp
.11313 .869688 .333989 .000488289 cmyk
f
249.878 223.689 mo
236.322 223.689 225.293 234.718 225.293 248.274 cv
225.293 261.831 236.322 272.859 249.878 272.859 cv
263.434 272.859 274.464 261.831 274.464 248.274 cv
274.464 234.718 263.434 223.689 249.878 223.689 cv
cp
249.878 273.859 mo
235.77 273.859 224.293 262.382 224.293 248.274 cv
224.293 234.166 235.77 222.689 249.878 222.689 cv
263.986 222.689 275.464 234.166 275.464 248.274 cv
275.464 262.382 263.986 273.859 249.878 273.859 cv
cp
.169497 .120851 .124178 0 cmyk
f
251.738 223.04 mo
251.417 223.017 251.095 222.999 250.771 222.988 cv
250.84 220.989 li
251.19 221.001 251.538 221.02 251.885 221.045 cv
251.738 223.04 li
cp
246.901 223.146 mo
246.667 221.16 li
247.012 221.119 247.359 221.085 247.708 221.058 cv
247.865 223.052 li
247.541 223.077 247.22 223.108 246.901 223.146 cv
cp
255.567 223.614 mo
255.253 223.542 254.937 223.476 254.62 223.415 cv
254.991 221.451 li
255.334 221.516 255.676 221.587 256.015 221.665 cv
255.567 223.614 li
cp
243.102 223.891 mo
242.568 221.963 li
242.903 221.87 243.24 221.784 243.58 221.703 cv
244.041 223.649 li
243.725 223.724 243.412 223.805 243.102 223.891 cv
cp
259.266 224.771 mo
258.966 224.651 258.663 224.537 258.357 224.428 cv
259.026 222.543 li
259.356 222.661 259.683 222.784 260.007 222.914 cv
259.266 224.771 li
cp
239.465 225.207 mo
238.642 223.385 li
238.958 223.242 239.278 223.104 239.6 222.974 cv
240.352 224.827 li
240.054 224.948 239.758 225.075 239.465 225.207 cv
cp
262.74 226.481 mo
262.461 226.316 262.18 226.157 261.895 226.003 cv
262.848 224.244 li
263.155 224.41 263.458 224.582 263.759 224.76 cv
262.74 226.481 li
cp
236.074 227.066 mo
234.981 225.392 li
235.272 225.201 235.568 225.017 235.867 224.838 cv
236.893 226.554 li
236.617 226.72 236.344 226.891 236.074 227.066 cv
cp
265.912 228.702 mo
265.662 228.497 265.409 228.296 265.152 228.101 cv
266.361 226.508 li
266.639 226.719 266.912 226.935 267.182 227.156 cv
265.912 228.702 li
cp
233.001 229.424 mo
231.668 227.934 li
231.927 227.702 232.19 227.475 232.457 227.252 cv
233.736 228.79 li
233.487 228.997 233.242 229.208 233.001 229.424 cv
cp
268.713 231.38 mo
268.496 231.139 268.276 230.902 268.051 230.67 cv
269.488 229.279 li
269.73 229.529 269.967 229.784 270.2 230.042 cv
268.713 231.38 li
cp
230.322 232.219 mo
228.776 230.95 li
228.998 230.68 229.225 230.415 229.456 230.154 cv
230.952 231.483 li
230.737 231.724 230.527 231.97 230.322 232.219 cv
cp
271.072 234.449 mo
270.895 234.178 270.713 233.911 270.526 233.647 cv
272.158 232.491 li
272.358 232.774 272.554 233.061 272.745 233.352 cv
271.072 234.449 li
cp
228.098 235.391 mo
226.377 234.372 li
226.555 234.071 226.739 233.774 226.929 233.48 cv
228.607 234.567 li
228.432 234.838 228.263 235.113 228.098 235.391 cv
cp
272.934 237.838 mo
272.801 237.544 272.662 237.253 272.518 236.965 cv
274.307 236.07 li
274.462 236.38 274.612 236.694 274.756 237.012 cv
272.934 237.838 li
cp
226.384 238.866 mo
224.527 238.122 li
224.658 237.797 224.794 237.475 224.936 237.157 cv
226.763 237.971 li
226.631 238.266 226.504 238.564 226.384 238.866 cv
cp
274.257 241.477 mo
274.169 241.165 274.077 240.854 273.978 240.547 cv
275.883 239.937 li
275.989 240.268 276.088 240.601 276.182 240.937 cv
274.257 241.477 li
cp
225.225 242.559 mo
223.276 242.11 li
223.354 241.769 223.44 241.431 223.531 241.095 cv
225.461 241.62 li
225.376 241.931 225.298 242.244 225.225 242.559 cv
cp
275.004 245.273 mo
274.966 244.951 274.922 244.63 274.872 244.312 cv
276.848 244.003 li
276.901 244.346 276.949 244.691 276.99 245.039 cv
275.004 245.273 li
cp
224.645 246.388 mo
222.651 246.24 li
222.677 245.892 222.709 245.545 222.748 245.2 cv
224.735 245.422 li
224.7 245.742 224.67 246.064 224.645 246.388 cv
cp
277.16 249.319 mo
275.161 249.243 li
275.173 248.921 275.18 248.599 275.18 248.274 cv
275.179 248.169 li
277.179 248.169 li
277.18 248.261 li
277.18 248.624 277.173 248.972 277.16 249.319 cv
cp
222.659 250.415 mo
222.632 250.07 222.612 249.723 222.598 249.373 cv
224.596 249.292 li
224.609 249.617 224.628 249.94 224.653 250.261 cv
222.659 250.415 li
cp
276.686 253.469 mo
274.722 253.09 li
274.783 252.773 274.838 252.455 274.887 252.136 cv
276.864 252.436 li
276.811 252.783 276.752 253.127 276.686 253.469 cv
cp
223.3 254.544 mo
223.221 254.206 223.147 253.866 223.08 253.524 cv
225.042 253.138 li
225.105 253.456 225.173 253.772 225.247 254.087 cv
223.3 254.544 li
cp
275.579 257.503 mo
273.699 256.823 li
273.808 256.519 273.911 256.213 274.009 255.904 cv
275.916 256.508 li
275.81 256.842 275.699 257.174 275.579 257.503 cv
cp
224.567 258.526 mo
224.436 258.204 224.311 257.879 224.193 257.551 cv
226.073 256.869 li
226.184 257.174 226.299 257.476 226.42 257.774 cv
224.567 258.526 li
cp
273.868 261.318 mo
272.113 260.359 li
272.267 260.076 272.416 259.789 272.56 259.5 cv
274.352 260.387 li
274.197 260.701 274.035 261.012 273.868 261.318 cv
cp
226.428 262.264 mo
226.249 261.965 226.076 261.662 225.909 261.355 cv
227.665 260.398 li
227.819 260.682 227.979 260.961 228.144 261.236 cv
226.428 262.264 li
cp
271.594 264.822 mo
270.004 263.609 li
270.201 263.352 270.392 263.092 270.578 262.827 cv
272.213 263.979 li
272.012 264.264 271.806 264.545 271.594 264.822 cv
cp
228.837 265.673 mo
228.615 265.405 228.398 265.133 228.187 264.855 cv
229.775 263.641 li
229.972 263.896 230.173 264.149 230.379 264.399 cv
228.837 265.673 li
cp
268.815 267.941 mo
267.428 266.5 li
267.661 266.276 267.889 266.049 268.113 265.815 cv
269.554 267.202 li
269.312 267.453 269.066 267.7 268.815 267.941 cv
cp
231.738 268.679 mo
231.477 268.446 231.221 268.21 230.969 267.968 cv
232.356 266.526 li
232.589 266.751 232.827 266.97 233.068 267.185 cv
231.738 268.679 li
cp
265.597 270.6 mo
264.441 268.967 li
264.706 268.779 264.967 268.588 265.224 268.392 cv
266.436 269.983 li
266.161 270.193 265.881 270.398 265.597 270.6 cv
cp
235.063 271.211 mo
234.771 271.021 234.482 270.826 234.197 270.627 cv
235.344 268.988 li
235.609 269.174 235.877 269.355 236.15 269.531 cv
235.063 271.211 li
cp
262.008 272.739 mo
261.121 270.946 li
261.41 270.804 261.696 270.654 261.978 270.501 cv
262.935 272.257 li
262.629 272.424 262.32 272.585 262.008 272.739 cv
cp
238.737 273.207 mo
238.417 273.063 238.101 272.914 237.788 272.759 cv
238.677 270.968 li
238.966 271.111 239.258 271.249 239.554 271.381 cv
238.737 273.207 li
cp
258.139 274.304 mo
257.529 272.399 li
257.839 272.3 258.145 272.196 258.45 272.087 cv
259.126 273.97 li
258.8 274.087 258.471 274.198 258.139 274.304 cv
cp
242.671 274.615 mo
242.334 274.522 242 274.425 241.669 274.32 cv
242.27 272.412 li
242.577 272.509 242.887 272.601 243.2 272.685 cv
242.671 274.615 li
cp
254.066 275.256 mo
253.764 273.279 li
254.084 273.23 254.402 273.175 254.718 273.114 cv
255.097 275.077 li
254.755 275.144 254.411 275.203 254.066 275.256 cv
cp
246.774 275.401 mo
246.428 275.362 246.083 275.316 245.741 275.266 cv
246.038 273.287 li
246.357 273.336 246.678 273.378 247.001 273.415 cv
246.774 275.401 li
cp
249.905 275.577 mo
249.899 273.577 li
250.225 273.576 250.549 273.569 250.871 273.558 cv
250.948 275.556 li
250.602 275.569 250.254 275.576 249.905 275.577 cv
cp
f
394.178 365.728 mo
387.184 365.728 380.607 368.452 375.661 373.398 cv
370.716 378.344 367.992 384.92 367.992 391.915 cv
367.992 398.909 370.716 405.485 375.661 410.431 cv
380.607 415.377 387.184 418.101 394.178 418.101 cv
401.172 418.101 407.749 415.377 412.694 410.431 cv
412.694 410.431 li
417.64 405.485 420.364 398.909 420.364 391.915 cv
420.364 384.92 417.64 378.344 412.694 373.398 cv
407.749 368.452 401.172 365.728 394.178 365.728 cv
cp
394.178 421.101 mo
386.382 421.101 379.053 418.064 373.54 412.552 cv
368.028 407.04 364.992 399.711 364.992 391.915 cv
364.992 384.118 368.028 376.789 373.54 371.277 cv
379.053 365.765 386.382 362.728 394.178 362.728 cv
401.974 362.728 409.303 365.765 414.815 371.277 cv
420.328 376.789 423.364 384.118 423.364 391.915 cv
423.364 399.711 420.328 407.04 414.815 412.552 cv
414.815 412.552 li
414.815 412.552 li
409.303 418.064 401.974 421.101 394.178 421.101 cv
cp
f
394.009 381.309 mo
391.248 381.309 388.488 382.358 386.386 384.46 cv
382.182 388.664 382.182 395.503 386.386 399.707 cv
388.422 401.743 391.129 402.864 394.009 402.864 cv
396.889 402.864 399.596 401.743 401.632 399.707 cv
401.632 399.707 li
405.835 395.503 405.835 388.664 401.632 384.46 cv
399.53 382.359 396.77 381.309 394.009 381.309 cv
cp
394.009 405.864 mo
390.328 405.864 386.867 404.431 384.265 401.828 cv
378.891 396.455 378.891 387.712 384.265 382.339 cv
389.638 376.966 398.38 376.967 403.753 382.339 cv
409.126 387.712 409.126 396.455 403.753 401.828 cv
403.753 401.828 li
403.753 401.828 li
401.15 404.431 397.69 405.864 394.009 405.864 cv
cp
f
394.009 407.864 mo
389.794 407.864 385.831 406.223 382.85 403.242 cv
376.698 397.089 376.698 387.078 382.85 380.925 cv
389.003 374.772 399.015 374.772 405.167 380.925 cv
405.4 381.158 405.621 381.393 405.833 381.633 cv
400.585 386.266 li
400.467 386.131 400.343 386 400.214 385.871 cv
396.794 382.451 391.223 382.451 387.8 385.875 cv
384.376 389.298 384.376 394.869 387.8 398.293 cv
389.458 399.951 391.663 400.864 394.009 400.864 cv
396.354 400.864 398.559 399.951 400.217 398.293 cv
402.035 396.475 402.963 393.96 402.763 391.394 cv
409.741 390.849 li
410.102 395.457 408.434 399.975 405.167 403.242 cv
402.187 406.223 398.224 407.864 394.009 407.864 cv
cp
.67126 0 .361639 0 cmyk
f
394.178 349.712 mo
383.364 349.712 372.555 353.826 364.322 362.059 cv
356.347 370.034 351.955 380.637 351.955 391.915 cv
351.955 403.193 356.347 413.796 364.322 421.77 cv
380.784 438.233 407.571 438.232 424.034 421.77 cv
432.008 413.796 436.4 403.193 436.4 391.915 cv
436.4 380.637 432.008 370.034 424.034 362.059 cv
415.803 353.828 404.989 349.712 394.178 349.712 cv
cp
394.178 437.115 mo
382.596 437.115 371.018 432.709 362.201 423.892 cv
353.66 415.351 348.955 403.994 348.955 391.915 cv
348.955 379.836 353.659 368.479 362.201 359.938 cv
379.833 342.305 408.523 342.305 426.155 359.938 cv
434.696 368.479 439.4 379.836 439.4 391.915 cv
439.4 403.994 434.696 415.351 426.155 423.892 cv
417.34 432.707 405.757 437.115 394.178 437.115 cv
cp
.169497 .120851 .124178 0 cmyk
f
394.178 440.691 mo
381.682 440.691 369.185 435.935 359.671 426.421 cv
340.645 407.395 340.645 376.435 359.671 357.408 cv
367.45 365.185 li
352.712 379.924 352.712 403.905 367.45 418.644 cv
382.188 433.38 406.169 433.379 420.906 418.644 cv
428.684 426.421 li
419.171 435.935 406.674 440.691 394.178 440.691 cv
cp
0 .493324 .647425 0 cmyk
f
394.178 424.101 mo
385.581 424.101 377.498 420.753 371.419 414.673 cv
365.34 408.595 361.992 400.512 361.992 391.914 cv
361.992 383.317 365.34 375.234 371.419 369.156 cv
378.944 361.63 389.691 358.317 400.161 360.287 cv
398.495 369.131 li
390.949 367.715 383.204 370.098 377.783 375.52 cv
373.404 379.899 370.992 385.722 370.992 391.914 cv
370.992 398.107 373.404 403.93 377.783 408.31 cv
382.162 412.688 387.985 415.101 394.178 415.101 cv
400.371 415.101 406.194 412.688 410.573 408.31 cv
413.881 405.001 416.089 400.833 416.956 396.258 cv
425.799 397.934 li
424.593 404.293 421.529 410.081 416.937 414.673 cv
410.858 420.753 402.775 424.101 394.178 424.101 cv
cp
.11313 .869688 .333989 .000488289 cmyk
f
102.944 442.654 mo
102.944 439.654 li
128.281 439.654 148.895 419.041 148.895 393.703 cv
148.895 368.365 128.281 347.752 102.944 347.752 cv
102.944 344.752 li
129.936 344.752 151.895 366.711 151.895 393.703 cv
151.895 420.695 129.936 442.654 102.944 442.654 cv
cp
.623468 0 .234043 0 cmyk
f
102.944 433.808 mo
102.944 430.808 li
123.403 430.808 140.048 414.163 140.048 393.703 cv
140.048 373.243 123.403 356.599 102.944 356.599 cv
82.4838 356.599 65.8388 373.243 65.8388 393.703 cv
62.8388 393.703 li
62.8388 371.59 80.83 353.599 102.944 353.599 cv
125.058 353.599 143.048 371.59 143.048 393.703 cv
143.048 415.816 125.058 433.808 102.944 433.808 cv
cp
0 .219608 .596918 0 cmyk
f
102.944 425.808 mo
85.2411 425.808 70.8388 411.405 70.8388 393.703 cv
73.8388 393.703 li
73.8388 409.751 86.8954 422.808 102.944 422.808 cv
118.992 422.808 132.048 409.751 132.048 393.703 cv
132.048 377.655 118.992 364.599 102.944 364.599 cv
102.944 361.599 li
120.646 361.599 135.048 376.001 135.048 393.703 cv
135.048 411.405 120.646 425.808 102.944 425.808 cv
cp
0 .493324 .647425 0 cmyk
f
102.944 416.844 mo
102.944 413.844 li
114.049 413.844 123.084 404.809 123.084 393.703 cv
123.084 382.598 114.049 373.563 102.944 373.563 cv
91.8378 373.563 82.8027 382.598 82.8027 393.703 cv
79.8027 393.703 li
79.8027 380.943 90.1835 370.563 102.944 370.563 cv
115.704 370.563 126.084 380.943 126.084 393.703 cv
126.084 406.463 115.704 416.844 102.944 416.844 cv
cp
.11313 .869688 .333989 .000488289 cmyk
f
102.944 408.411 mo
94.8339 408.411 88.2358 401.813 88.2358 393.703 cv
91.2358 393.703 li
91.2358 400.159 96.4877 405.411 102.944 405.411 cv
109.4 405.411 114.652 400.159 114.652 393.703 cv
114.652 387.247 109.4 381.995 102.944 381.995 cv
102.944 378.995 li
111.054 378.995 117.652 385.593 117.652 393.703 cv
117.652 401.813 111.054 408.411 102.944 408.411 cv
cp
.76437 .0889906 .320897 0 cmyk
f
303.875 348.316 mo
195.881 348.316 li
195.743 348.316 195.631 348.204 195.631 348.066 cv
195.631 347.929 195.743 347.816 195.881 347.816 cv
303.875 347.816 li
304.014 347.816 304.125 347.929 304.125 348.066 cv
304.125 348.204 304.014 348.316 303.875 348.316 cv
cp
.0847486 .0569162 .0569467 0 cmyk
f
303.875 359.174 mo
195.881 359.174 li
195.743 359.174 195.631 359.061 195.631 358.924 cv
195.631 358.786 195.743 358.674 195.881 358.674 cv
303.875 358.674 li
304.014 358.674 304.125 358.786 304.125 358.924 cv
304.125 359.061 304.014 359.174 303.875 359.174 cv
cp
f
303.875 370.03 mo
195.881 370.03 li
195.743 370.03 195.631 369.918 195.631 369.78 cv
195.631 369.643 195.743 369.53 195.881 369.53 cv
303.875 369.53 li
304.014 369.53 304.125 369.643 304.125 369.78 cv
304.125 369.918 304.014 370.03 303.875 370.03 cv
cp
f
303.875 380.888 mo
195.881 380.888 li
195.743 380.888 195.631 380.775 195.631 380.638 cv
195.631 380.5 195.743 380.388 195.881 380.388 cv
303.875 380.388 li
304.014 380.388 304.125 380.5 304.125 380.638 cv
304.125 380.775 304.014 380.888 303.875 380.888 cv
cp
f
303.875 391.745 mo
195.881 391.745 li
195.743 391.745 195.631 391.633 195.631 391.495 cv
195.631 391.357 195.743 391.245 195.881 391.245 cv
303.875 391.245 li
304.014 391.245 304.125 391.357 304.125 391.495 cv
304.125 391.633 304.014 391.745 303.875 391.745 cv
cp
f
303.875 402.602 mo
195.881 402.602 li
195.743 402.602 195.631 402.489 195.631 402.352 cv
195.631 402.214 195.743 402.102 195.881 402.102 cv
303.875 402.102 li
304.014 402.102 304.125 402.214 304.125 402.352 cv
304.125 402.489 304.014 402.602 303.875 402.602 cv
cp
f
303.875 413.459 mo
195.881 413.459 li
195.743 413.459 195.631 413.347 195.631 413.209 cv
195.631 413.071 195.743 412.959 195.881 412.959 cv
303.875 412.959 li
304.014 412.959 304.125 413.071 304.125 413.209 cv
304.125 413.347 304.014 413.459 303.875 413.459 cv
cp
f
303.875 424.316 mo
195.881 424.316 li
195.743 424.316 195.631 424.204 195.631 424.066 cv
195.631 423.929 195.743 423.816 195.881 423.816 cv
303.875 423.816 li
304.014 423.816 304.125 423.929 304.125 424.066 cv
304.125 424.204 304.014 424.316 303.875 424.316 cv
cp
f
214.455 440.352 mo
214.317 440.352 214.205 440.239 214.205 440.102 cv
214.205 348.377 li
214.205 348.239 214.317 348.127 214.455 348.127 cv
214.593 348.127 214.705 348.239 214.705 348.377 cv
214.705 440.102 li
214.705 440.239 214.593 440.352 214.455 440.352 cv
cp
f
225.881 440.352 mo
225.743 440.352 225.631 440.239 225.631 440.102 cv
225.631 348.377 li
225.631 348.239 225.743 348.127 225.881 348.127 cv
226.02 348.127 226.131 348.239 226.131 348.377 cv
226.131 440.102 li
226.131 440.239 226.02 440.352 225.881 440.352 cv
cp
f
237.308 440.352 mo
237.17 440.352 237.058 440.239 237.058 440.102 cv
237.058 348.377 li
237.058 348.239 237.17 348.127 237.308 348.127 cv
237.446 348.127 237.558 348.239 237.558 348.377 cv
237.558 440.102 li
237.558 440.239 237.446 440.352 237.308 440.352 cv
cp
f
248.734 440.352 mo
248.596 440.352 248.484 440.239 248.484 440.102 cv
248.484 348.377 li
248.484 348.239 248.596 348.127 248.734 348.127 cv
248.872 348.127 248.984 348.239 248.984 348.377 cv
248.984 440.102 li
248.984 440.239 248.872 440.352 248.734 440.352 cv
cp
f
260.161 440.352 mo
260.023 440.352 259.911 440.239 259.911 440.102 cv
259.911 348.377 li
259.911 348.239 260.023 348.127 260.161 348.127 cv
260.299 348.127 260.411 348.239 260.411 348.377 cv
260.411 440.102 li
260.411 440.239 260.299 440.352 260.161 440.352 cv
cp
f
271.588 440.352 mo
271.45 440.352 271.338 440.239 271.338 440.102 cv
271.338 348.377 li
271.338 348.239 271.45 348.127 271.588 348.127 cv
271.726 348.127 271.838 348.239 271.838 348.377 cv
271.838 440.102 li
271.838 440.239 271.726 440.352 271.588 440.352 cv
cp
f
283.014 440.352 mo
282.876 440.352 282.764 440.239 282.764 440.102 cv
282.764 348.377 li
282.764 348.239 282.876 348.127 283.014 348.127 cv
283.152 348.127 283.264 348.239 283.264 348.377 cv
283.264 440.102 li
283.264 440.239 283.152 440.352 283.014 440.352 cv
cp
f
294.441 440.352 mo
294.303 440.352 294.191 440.239 294.191 440.102 cv
294.191 348.377 li
294.191 348.239 294.303 348.127 294.441 348.127 cv
294.579 348.127 294.691 348.239 294.691 348.377 cv
294.691 440.102 li
294.691 440.239 294.579 440.352 294.441 440.352 cv
cp
f
221.991 435.195 mo
208.971 435.195 li
208.971 362.219 li
221.991 362.219 li
221.991 435.195 li
cp
.623468 0 .234043 0 cmyk
f
235.01 435.195 mo
221.991 435.195 li
221.991 377.646 li
235.01 377.646 li
235.01 435.195 li
cp
0 .219608 .596918 0 cmyk
f
253.479 435.195 mo
240.46 435.195 li
240.46 376.107 li
253.479 376.107 li
253.479 435.195 li
cp
.11313 .869688 .333989 .000488289 cmyk
f
266.498 435.195 mo
253.479 435.195 li
253.479 388.598 li
266.498 388.598 li
266.498 435.195 li
cp
.76437 .0889906 .320897 0 cmyk
f
286.979 435.195 mo
273.96 435.195 li
273.96 376.107 li
286.979 376.107 li
286.979 435.195 li
cp
0 .493324 .647425 0 cmyk
f
299.998 435.195 mo
286.979 435.195 li
286.979 367.511 li
299.998 367.511 li
299.998 435.195 li
cp
0 .85156 .162356 0 cmyk
f
303.888 436.695 mo
199.405 436.695 li
199.405 347.055 li
202.405 347.055 li
202.405 433.695 li
303.888 433.695 li
303.888 436.695 li
cp
.169497 .120851 .124178 0 cmyk
f
362.039 294.174 mo
361.539 294.174 li
361.539 202.374 li
362.039 202.374 li
362.039 294.174 li
cp
f
377.339 294.174 mo
376.839 294.174 li
376.839 202.374 li
377.339 202.374 li
377.339 294.174 li
cp
f
392.639 294.174 mo
392.139 294.174 li
392.139 202.374 li
392.639 202.374 li
392.639 294.174 li
cp
f
407.939 294.174 mo
407.439 294.174 li
407.439 202.374 li
407.939 202.374 li
407.939 294.174 li
cp
f
423.239 294.174 mo
422.739 294.174 li
422.739 202.374 li
423.239 202.374 li
423.239 294.174 li
cp
f
438.289 217.924 mo
346.49 217.924 li
346.49 217.424 li
438.289 217.424 li
438.289 217.924 li
cp
f
438.289 233.225 mo
346.49 233.225 li
346.49 232.725 li
438.289 232.725 li
438.289 233.225 li
cp
f
438.289 248.524 mo
346.49 248.524 li
346.49 248.024 li
438.289 248.024 li
438.289 248.524 li
cp
f
438.289 263.824 mo
346.49 263.824 li
346.49 263.324 li
438.289 263.324 li
438.289 263.824 li
cp
f
438.289 279.124 mo
346.49 279.124 li
346.49 278.624 li
438.289 278.624 li
438.289 279.124 li
cp
f
347.49 293.174 mo
437.289 293.174 li
437.289 203.374 li
347.49 203.374 li
347.49 293.174 li
cp
439.289 295.174 mo
345.49 295.174 li
345.49 201.374 li
439.289 201.374 li
439.289 295.174 li
cp
f
393.902 251.388 mo
392.827 250.341 li
400.936 242.011 li
402.012 243.058 li
393.902 251.388 li
cp
.76437 .0889906 .320897 0 cmyk
f
359.161 277.324 mo
358.524 276.925 li
357.926 276.473 li
357.956 276.433 li
372.286 256.635 li
373.501 257.514 li
359.161 277.324 li
cp
f
377.709 255.051 mo
377.559 253.559 li
388.329 252.478 li
388.479 253.971 li
377.709 255.051 li
cp
f
415.584 250.42 mo
405.874 242.887 li
406.794 241.702 li
415.464 248.429 li
429.637 234.411 li
430.691 235.477 li
415.584 250.42 li
cp
f
356.852 277.091 mo
355.657 277.091 354.685 278.062 354.685 279.258 cv
354.685 280.452 355.657 281.424 356.852 281.424 cv
358.046 281.424 359.018 280.452 359.018 279.258 cv
359.018 278.062 358.046 277.091 356.852 277.091 cv
cp
356.852 282.924 mo
354.83 282.924 353.185 281.279 353.185 279.258 cv
353.185 277.235 354.83 275.591 356.852 275.591 cv
358.874 275.591 360.518 277.235 360.518 279.258 cv
360.518 281.279 358.874 282.924 356.852 282.924 cv
cp
f
374.768 252.674 mo
373.574 252.674 372.602 253.645 372.602 254.841 cv
372.602 256.036 373.574 257.008 374.768 257.008 cv
375.963 257.008 376.935 256.036 376.935 254.841 cv
376.935 253.645 375.963 252.674 374.768 252.674 cv
cp
374.768 258.508 mo
372.746 258.508 371.102 256.863 371.102 254.841 cv
371.102 252.818 372.746 251.174 374.768 251.174 cv
376.79 251.174 378.435 252.818 378.435 254.841 cv
378.435 256.863 376.79 258.508 374.768 258.508 cv
cp
f
391.301 250.758 mo
390.106 250.758 389.134 251.729 389.134 252.925 cv
389.134 254.119 390.106 255.091 391.301 255.091 cv
392.496 255.091 393.468 254.119 393.468 252.925 cv
393.468 251.729 392.496 250.758 391.301 250.758 cv
cp
391.301 256.591 mo
389.279 256.591 387.634 254.946 387.634 252.925 cv
387.634 250.903 389.279 249.258 391.301 249.258 cv
393.323 249.258 394.968 250.903 394.968 252.925 cv
394.968 254.946 393.323 256.591 391.301 256.591 cv
cp
f
403.823 238.635 mo
402.628 238.635 401.657 239.607 401.657 240.802 cv
401.657 241.997 402.628 242.969 403.823 242.969 cv
405.018 242.969 405.99 241.997 405.99 240.802 cv
405.99 239.607 405.018 238.635 403.823 238.635 cv
cp
403.823 244.469 mo
401.802 244.469 400.157 242.824 400.157 240.802 cv
400.157 238.78 401.802 237.135 403.823 237.135 cv
405.845 237.135 407.49 238.78 407.49 240.802 cv
407.49 242.824 405.845 244.469 403.823 244.469 cv
cp
f
432.202 230.702 mo
431.007 230.702 430.036 231.673 430.036 232.868 cv
430.036 234.063 431.007 235.035 432.202 235.035 cv
433.397 235.035 434.369 234.063 434.369 232.868 cv
434.369 231.673 433.397 230.702 432.202 230.702 cv
cp
432.202 236.535 mo
430.181 236.535 428.536 234.89 428.536 232.868 cv
428.536 230.847 430.181 229.202 432.202 229.202 cv
434.224 229.202 435.869 230.847 435.869 232.868 cv
435.869 234.89 434.224 236.535 432.202 236.535 cv
cp
f
422.306 256.812 mo
421.111 256.812 420.14 257.784 420.14 258.979 cv
420.14 260.175 421.111 261.146 422.306 261.146 cv
423.501 261.146 424.473 260.175 424.473 258.979 cv
424.473 257.784 423.501 256.812 422.306 256.812 cv
cp
422.306 262.646 mo
420.285 262.646 418.64 261.002 418.64 258.979 cv
418.64 256.957 420.285 255.312 422.306 255.312 cv
424.328 255.312 425.973 256.957 425.973 258.979 cv
425.973 261.002 424.328 262.646 422.306 262.646 cv
cp
.11313 .869688 .333989 .000488289 cmyk
f
405.329 266.905 mo
404.134 266.905 403.162 267.877 403.162 269.072 cv
403.162 270.267 404.134 271.238 405.329 271.238 cv
406.524 271.238 407.496 270.267 407.496 269.072 cv
407.496 267.877 406.524 266.905 405.329 266.905 cv
cp
405.329 272.738 mo
403.307 272.738 401.662 271.094 401.662 269.072 cv
401.662 267.05 403.307 265.405 405.329 265.405 cv
407.351 265.405 408.996 267.05 408.996 269.072 cv
408.996 271.094 407.351 272.738 405.329 272.738 cv
cp
f
375.622 282.801 mo
374.427 282.801 373.456 283.772 373.456 284.968 cv
373.456 286.163 374.427 287.135 375.622 287.135 cv
376.817 287.135 377.789 286.163 377.789 284.968 cv
377.789 283.772 376.817 282.801 375.622 282.801 cv
cp
375.622 288.635 mo
373.6 288.635 371.956 286.99 371.956 284.968 cv
371.956 282.945 373.6 281.301 375.622 281.301 cv
377.644 281.301 379.289 282.945 379.289 284.968 cv
379.289 286.99 377.644 288.635 375.622 288.635 cv
cp
f
390.004 265.585 mo
388.809 265.585 387.838 266.557 387.838 267.752 cv
387.838 268.339 388.078 268.91 388.496 269.32 cv
388.902 269.718 389.432 269.911 389.989 269.919 cv
391.249 269.893 392.187 268.966 392.171 267.763 cv
392.171 267.762 li
392.155 266.541 391.203 265.585 390.004 265.585 cv
cp
389.945 271.42 mo
389.009 271.42 388.125 271.057 387.447 270.393 cv
386.742 269.702 386.338 268.739 386.338 267.752 cv
386.338 265.729 387.983 264.085 390.004 264.085 cv
391.999 264.085 393.643 265.726 393.671 267.741 cv
393.671 267.741 li
393.699 269.76 392.095 271.375 390.02 271.419 cv
389.995 271.419 389.97 271.42 389.945 271.42 cv
cp
f
378.081 283.229 mo
376.927 282.272 li
387.517 269.503 li
388.671 270.46 li
378.081 283.229 li
cp
f
408.347 268.502 mo
407.601 267.201 li
419.894 260.148 li
420.634 261.453 li
420.474 261.544 li
408.347 268.502 li
cp
f
402.346 269.727 mo
392.836 268.737 li
392.992 267.245 li
402.501 268.235 li
402.346 269.727 li
cp
f
355.755 257.952 mo
354.415 257.278 li
370.519 225.281 li
385.855 229.162 li
402.343 222.035 li
416.346 225.329 li
429.629 211.797 li
430.699 212.848 li
416.825 226.982 li
402.482 223.609 li
385.982 230.741 li
371.318 227.03 li
355.755 257.952 li
cp
0 .219608 .596918 0 cmyk
f
358.002 257.615 mo
358.002 259.226 356.696 260.531 355.085 260.531 cv
353.474 260.531 352.169 259.226 352.169 257.615 cv
352.169 256.004 353.474 254.698 355.085 254.698 cv
356.696 254.698 358.002 256.004 358.002 257.615 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
355.085 255.448 mo
353.891 255.448 352.919 256.42 352.919 257.615 cv
352.919 258.81 353.891 259.781 355.085 259.781 cv
356.28 259.781 357.252 258.81 357.252 257.615 cv
357.252 256.42 356.28 255.448 355.085 255.448 cv
cp
355.085 261.281 mo
353.064 261.281 351.419 259.637 351.419 257.615 cv
351.419 255.593 353.064 253.948 355.085 253.948 cv
357.107 253.948 358.752 255.593 358.752 257.615 cv
358.752 259.637 357.107 261.281 355.085 261.281 cv
cp
0 .219608 .596918 0 cmyk
f
373.835 226.155 mo
373.835 227.766 372.529 229.072 370.919 229.072 cv
369.308 229.072 368.002 227.766 368.002 226.155 cv
368.002 224.545 369.308 223.239 370.919 223.239 cv
372.529 223.239 373.835 224.545 373.835 226.155 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
370.918 223.989 mo
369.724 223.989 368.752 224.96 368.752 226.155 cv
368.752 227.35 369.724 228.322 370.918 228.322 cv
372.113 228.322 373.085 227.35 373.085 226.155 cv
373.085 224.96 372.113 223.989 370.918 223.989 cv
cp
370.918 229.822 mo
368.897 229.822 367.252 228.177 367.252 226.155 cv
367.252 224.134 368.897 222.489 370.918 222.489 cv
372.94 222.489 374.585 224.134 374.585 226.155 cv
374.585 228.177 372.94 229.822 370.918 229.822 cv
cp
0 .219608 .596918 0 cmyk
f
388.835 229.951 mo
388.835 231.562 387.529 232.868 385.919 232.868 cv
384.308 232.868 383.002 231.562 383.002 229.951 cv
383.002 228.341 384.308 227.035 385.919 227.035 cv
387.529 227.035 388.835 228.341 388.835 229.951 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
385.918 227.785 mo
384.724 227.785 383.752 228.757 383.752 229.952 cv
383.752 231.146 384.724 232.118 385.918 232.118 cv
387.113 232.118 388.085 231.146 388.085 229.952 cv
388.085 228.757 387.113 227.785 385.918 227.785 cv
cp
385.918 233.618 mo
383.897 233.618 382.252 231.973 382.252 229.952 cv
382.252 227.93 383.897 226.285 385.918 226.285 cv
387.94 226.285 389.585 227.93 389.585 229.952 cv
389.585 231.973 387.94 233.618 385.918 233.618 cv
cp
0 .219608 .596918 0 cmyk
f
405.329 222.822 mo
405.329 224.433 404.023 225.739 402.412 225.739 cv
400.802 225.739 399.496 224.433 399.496 222.822 cv
399.496 221.211 400.802 219.905 402.412 219.905 cv
404.023 219.905 405.329 221.211 405.329 222.822 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
402.412 220.655 mo
401.218 220.655 400.246 221.627 400.246 222.822 cv
400.246 224.017 401.218 224.989 402.412 224.989 cv
403.607 224.989 404.579 224.017 404.579 222.822 cv
404.579 221.627 403.607 220.655 402.412 220.655 cv
cp
402.412 226.489 mo
400.391 226.489 398.746 224.844 398.746 222.822 cv
398.746 220.8 400.391 219.155 402.412 219.155 cv
404.434 219.155 406.079 220.8 406.079 222.822 cv
406.079 224.844 404.434 226.489 402.412 226.489 cv
cp
0 .219608 .596918 0 cmyk
f
419.502 226.155 mo
419.502 227.766 418.196 229.072 416.585 229.072 cv
414.974 229.072 413.669 227.766 413.669 226.155 cv
413.669 224.545 414.974 223.239 416.585 223.239 cv
418.196 223.239 419.502 224.545 419.502 226.155 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
416.585 223.989 mo
415.391 223.989 414.419 224.96 414.419 226.155 cv
414.419 227.35 415.391 228.322 416.585 228.322 cv
417.78 228.322 418.752 227.35 418.752 226.155 cv
418.752 224.96 417.78 223.989 416.585 223.989 cv
cp
416.585 229.822 mo
414.564 229.822 412.919 228.177 412.919 226.155 cv
412.919 224.134 414.564 222.489 416.585 222.489 cv
418.607 222.489 420.252 224.134 420.252 226.155 cv
420.252 228.177 418.607 229.822 416.585 229.822 cv
cp
0 .219608 .596918 0 cmyk
f
433.081 212.614 mo
433.081 214.225 431.775 215.53 430.164 215.53 cv
428.553 215.53 427.247 214.225 427.247 212.614 cv
427.247 211.003 428.553 209.697 430.164 209.697 cv
431.775 209.697 433.081 211.003 433.081 212.614 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
430.164 210.447 mo
428.969 210.447 427.997 211.419 427.997 212.614 cv
427.997 213.809 428.969 214.78 430.164 214.78 cv
431.359 214.78 432.33 213.809 432.33 212.614 cv
432.33 211.419 431.359 210.447 430.164 210.447 cv
cp
430.164 216.28 mo
428.142 216.28 426.497 214.635 426.497 212.614 cv
426.497 210.592 428.142 208.947 430.164 208.947 cv
432.185 208.947 433.83 210.592 433.83 212.614 cv
433.83 214.635 432.185 216.28 430.164 216.28 cv
cp
0 .219608 .596918 0 cmyk
f
418.441 249.424 mo
418.441 251.035 417.135 252.341 415.524 252.341 cv
413.913 252.341 412.607 251.035 412.607 249.424 cv
412.607 247.814 413.913 246.508 415.524 246.508 cv
417.135 246.508 418.441 247.814 418.441 249.424 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
415.524 247.258 mo
414.329 247.258 413.357 248.229 413.357 249.424 cv
413.357 250.619 414.329 251.591 415.524 251.591 cv
416.719 251.591 417.691 250.619 417.691 249.424 cv
417.691 248.229 416.719 247.258 415.524 247.258 cv
cp
415.524 253.091 mo
413.502 253.091 411.857 251.446 411.857 249.424 cv
411.857 247.403 413.502 245.758 415.524 245.758 cv
417.546 245.758 419.191 247.403 419.191 249.424 cv
419.191 251.446 417.546 253.091 415.524 253.091 cv
cp
.76437 .0889906 .320897 0 cmyk
f
352.723 112.519 mo
347.056 112.519 li
347.056 98.2761 li
352.723 98.2761 li
352.723 112.519 li
cp
0 .493324 .647425 0 cmyk
f
364.056 112.519 mo
358.389 112.519 li
358.389 84.0335 li
364.056 84.0335 li
364.056 112.519 li
cp
f
358.389 125.687 mo
352.723 125.687 li
352.723 112.519 li
358.389 112.519 li
358.389 125.687 li
cp
.76437 .0889906 .320897 0 cmyk
f
369.723 129.687 mo
364.056 129.687 li
364.056 112.519 li
369.723 112.519 li
369.723 129.687 li
cp
f
375.389 112.519 mo
369.723 112.519 li
369.723 76.2277 li
375.389 76.2277 li
375.389 112.519 li
cp
0 .493324 .647425 0 cmyk
f
386.723 112.519 mo
381.056 112.519 li
381.056 84.0335 li
386.723 84.0335 li
386.723 112.519 li
cp
f
381.056 141.004 mo
375.389 141.004 li
375.389 112.519 li
381.056 112.519 li
381.056 141.004 li
cp
.76437 .0889906 .320897 0 cmyk
f
392.389 136.187 mo
386.723 136.187 li
386.723 112.519 li
392.389 112.519 li
392.389 136.187 li
cp
f
398.056 112.519 mo
392.389 112.519 li
392.389 64.687 li
398.056 64.687 li
398.056 112.519 li
cp
0 .493324 .647425 0 cmyk
f
409.389 112.519 mo
403.723 112.519 li
403.723 72.687 li
409.389 72.687 li
409.389 112.519 li
cp
f
403.723 129.687 mo
398.056 129.687 li
398.056 112.519 li
403.723 112.519 li
403.723 129.687 li
cp
.76437 .0889906 .320897 0 cmyk
f
415.056 123.099 mo
409.389 123.099 li
409.389 112.519 li
415.056 112.519 li
415.056 123.099 li
cp
f
420.723 112.519 mo
415.056 112.519 li
415.056 79.687 li
420.723 79.687 li
420.723 112.519 li
cp
0 .493324 .647425 0 cmyk
f
432.056 112.519 mo
426.389 112.519 li
426.389 96.1721 li
432.056 96.1721 li
432.056 112.519 li
cp
f
426.389 127.255 mo
420.723 127.255 li
420.723 112.519 li
426.389 112.519 li
426.389 127.255 li
cp
.76437 .0889906 .320897 0 cmyk
f
437.723 117.809 mo
432.056 117.809 li
432.056 112.519 li
437.723 112.519 li
437.723 117.809 li
cp
f
260.104 467.949 mo
259.672 468.392 259.301 468.88 258.996 469.402 cv
258.53 469.161 li
258.464 468.863 258.181 468.658 257.872 468.695 cv
257.541 468.733 257.304 469.033 257.343 469.364 cv
257.382 469.695 257.682 469.932 258.012 469.893 cv
258.078 469.885 258.139 469.867 258.196 469.841 cv
258.647 470.075 li
258.396 470.629 258.215 471.214 258.108 471.819 cv
258.855 471.951 li
259.085 470.645 259.704 469.444 260.647 468.478 cv
260.104 467.949 li
cp
.35877 .201297 .147463 0 cmyk
f
265.592 465.647 mo
265.421 465.647 265.251 465.653 265.082 465.664 cv
265.008 465.038 li
265.196 464.888 265.304 464.648 265.274 464.393 cv
265.228 464 264.872 463.719 264.479 463.765 cv
264.086 463.811 263.805 464.167 263.851 464.56 cv
263.881 464.814 264.04 465.022 264.255 465.124 cv
264.329 465.748 li
263.615 465.864 262.926 466.08 262.269 466.394 cv
262.596 467.078 li
263.53 466.631 264.538 466.405 265.592 466.405 cv
266.088 466.405 266.585 466.458 267.067 466.562 cv
267.227 465.822 li
266.692 465.706 266.142 465.647 265.592 465.647 cv
cp
f
272.194 468.194 mo
272.525 468.153 272.76 467.852 272.72 467.522 cv
272.679 467.191 272.378 466.956 272.047 466.996 cv
271.738 467.034 271.512 467.3 271.517 467.605 cv
271.102 467.968 li
270.684 467.538 270.212 467.155 269.694 466.829 cv
269.29 467.47 li
270.424 468.185 271.31 469.196 271.853 470.395 cv
272.544 470.083 li
272.293 469.529 271.976 469.011 271.602 468.538 cv
272.004 468.187 li
272.065 468.199 272.129 468.202 272.194 468.194 cv
cp
f
265.044 475.855 mo
264.658 475.878 264.269 475.89 263.887 475.89 cv
263.007 475.89 262.154 475.829 261.409 475.711 cv
261.018 475.649 260.563 475.556 260.138 475.419 cv
261.185 477.28 263.208 478.544 265.527 478.544 cv
268.382 478.544 270.789 476.628 271.476 474.04 cv
270.795 474.489 269.971 474.865 269.018 475.163 cv
267.839 475.53 266.463 475.77 265.044 475.855 cv
cp
f
268.17 472.769 mo
267.42 472.769 266.809 472.159 266.809 471.409 cv
266.809 470.659 267.42 470.049 268.17 470.049 cv
268.92 470.049 269.53 470.659 269.53 471.409 cv
269.53 472.159 268.92 472.769 268.17 472.769 cv
cp
263.432 473.678 mo
262.413 473.678 261.583 472.848 261.583 471.828 cv
261.583 470.808 262.413 469.978 263.432 469.978 cv
264.452 469.978 265.282 470.808 265.282 471.828 cv
265.282 472.848 264.452 473.678 263.432 473.678 cv
cp
265.592 467.163 mo
262.24 467.163 259.512 469.829 259.512 473.106 cv
259.512 473.532 259.558 473.955 259.649 474.368 cv
260.323 474.85 262.355 475.258 264.997 475.099 cv
267.876 474.925 270.294 474.141 271.669 472.94 cv
271.663 472.745 271.648 472.55 271.624 472.358 cv
271.244 469.396 268.65 467.163 265.592 467.163 cv
cp
f
281.595 469.03 mo
281.301 468.914 280.79 468.721 280.213 468.793 cv
279.662 468.861 279.369 469.133 279.369 469.799 cv
279.369 470.665 li
281.597 470.665 li
281.597 472.382 li
279.369 472.382 li
279.369 477.837 li
277.437 477.837 li
277.437 472.382 li
276.098 472.382 li
276.098 470.665 li
277.437 470.665 li
277.437 469.777 li
277.437 468.097 278.333 466.994 280.006 466.994 cv
280.648 466.994 281.163 467.116 281.595 467.302 cv
281.595 469.03 li
cp
f
286.298 472.362 mo
286.121 472.332 285.94 472.316 285.772 472.316 cv
284.876 472.316 284.262 472.863 284.262 473.929 cv
284.262 477.837 li
282.33 477.837 li
282.33 470.665 li
284.203 470.665 li
284.203 471.45 li
284.654 470.776 285.342 470.473 286.223 470.473 cv
286.638 470.473 287.071 470.6 287.318 470.81 cv
286.298 472.362 li
cp
f
288.851 473.574 mo
292.026 473.574 li
291.848 472.656 291.293 472.138 290.464 472.138 cv
289.554 472.138 289.021 472.686 288.851 473.574 cv
cp
293.965 474.24 mo
293.965 474.462 293.95 474.729 293.928 474.892 cv
288.843 474.892 li
289.051 475.928 289.776 476.379 290.686 476.379 cv
291.308 476.379 291.982 476.128 292.499 475.691 cv
293.632 476.934 li
292.818 477.682 291.782 478.022 290.575 478.022 cv
288.377 478.022 286.852 476.527 286.852 474.27 cv
286.852 472.012 288.333 470.473 290.479 470.473 cv
292.544 470.473 293.958 472.005 293.965 474.24 cv
cp
f
296.504 473.574 mo
299.679 473.574 li
299.501 472.656 298.946 472.138 298.117 472.138 cv
297.207 472.138 296.674 472.686 296.504 473.574 cv
cp
301.618 474.24 mo
301.618 474.462 301.603 474.729 301.581 474.892 cv
296.497 474.892 li
296.704 475.928 297.429 476.379 298.339 476.379 cv
298.961 476.379 299.635 476.128 300.153 475.691 cv
301.285 476.934 li
300.471 477.682 299.435 478.022 298.228 478.022 cv
296.03 478.022 294.506 476.527 294.506 474.27 cv
294.506 472.012 295.986 470.473 298.132 470.473 cv
300.197 470.473 301.611 472.005 301.618 474.24 cv
cp
f
304.287 474.248 mo
304.287 475.38 305.035 476.224 306.13 476.224 cv
307.27 476.224 307.98 475.343 307.98 474.248 cv
307.98 473.152 307.27 472.271 306.13 472.271 cv
305.035 472.271 304.287 473.115 304.287 474.248 cv
cp
309.964 474.248 mo
309.964 476.401 308.469 478.022 306.493 478.022 cv
305.53 478.022 304.85 477.645 304.383 477.09 cv
304.383 480.798 li
302.459 480.798 li
302.459 470.665 li
304.346 470.665 li
304.346 471.457 li
304.813 470.872 305.501 470.473 306.485 470.473 cv
308.469 470.473 309.964 472.094 309.964 474.248 cv
cp
f
312.809 477.837 mo
310.877 477.837 li
310.877 470.665 li
312.809 470.665 li
312.809 477.837 li
cp
313.068 468.319 mo
313.068 469.015 312.527 469.548 311.831 469.548 cv
311.136 469.548 310.603 469.015 310.603 468.319 cv
310.603 467.623 311.136 467.076 311.831 467.076 cv
312.527 467.076 313.068 467.623 313.068 468.319 cv
cp
f
316.032 473.219 mo
318.734 470.665 li
321.102 470.665 li
317.623 474.04 li
321.124 477.837 li
318.748 477.837 li
316.032 474.936 li
316.032 477.837 li
314.1 477.837 li
314.1 467.179 li
316.032 467.179 li
316.032 473.219 li
cp
f
184.412 475.853 mo
184.412 472.646 li
184.017 472.03 183.167 471.503 182.288 471.503 cv
180.868 471.503 180.018 472.675 180.018 474.242 cv
180.018 475.81 180.868 476.967 182.288 476.967 cv
183.167 476.967 184.017 476.469 184.412 475.853 cv
cp
184.412 477.772 mo
184.412 476.717 li
183.885 477.435 183.021 477.948 182.025 477.948 cv
180.179 477.948 178.876 476.542 178.876 474.242 cv
178.876 471.986 180.165 470.522 182.025 470.522 cv
182.977 470.522 183.841 470.99 184.412 471.767 cv
184.412 468.002 li
185.511 468.002 li
185.511 477.772 li
184.412 477.772 li
cp
f
190.403 471.43 mo
188.894 471.43 188.147 472.704 188.089 473.788 cv
192.732 473.788 li
192.718 472.733 192.014 471.43 190.403 471.43 cv
cp
186.932 474.228 mo
186.932 472.177 188.396 470.522 190.418 470.522 cv
192.557 470.522 193.816 472.192 193.816 474.315 cv
193.816 474.594 li
188.089 474.594 li
188.177 475.927 189.114 477.04 190.638 477.04 cv
191.443 477.04 192.264 476.717 192.82 476.146 cv
193.347 476.864 li
192.644 477.567 191.693 477.948 190.535 477.948 cv
188.44 477.948 186.932 476.439 186.932 474.228 cv
cp
f
194.607 476.835 mo
195.178 476.044 li
195.647 476.586 196.54 477.055 197.507 477.055 cv
198.591 477.055 199.177 476.542 199.177 475.839 cv
199.177 474.125 194.798 475.18 194.798 472.557 cv
194.798 471.459 195.749 470.522 197.434 470.522 cv
198.635 470.522 199.485 470.976 200.056 471.547 cv
199.543 472.309 li
199.119 471.796 198.342 471.415 197.434 471.415 cv
196.467 471.415 195.867 471.899 195.867 472.528 cv
195.867 474.081 200.246 473.056 200.246 475.81 cv
200.246 476.996 199.294 477.948 197.463 477.948 cv
196.306 477.948 195.324 477.596 194.607 476.835 cv
cp
f
201.667 477.772 mo
201.667 470.697 li
202.766 470.697 li
202.766 477.772 li
201.667 477.772 li
cp
201.477 468.954 mo
201.477 468.544 201.814 468.207 202.209 468.207 cv
202.619 468.207 202.956 468.544 202.956 468.954 cv
202.956 469.365 202.619 469.686 202.209 469.686 cv
201.814 469.686 201.477 469.365 201.477 468.954 cv
cp
f
209.709 475.736 mo
209.709 472.646 li
209.328 472.03 208.478 471.503 207.599 471.503 cv
206.178 471.503 205.329 472.631 205.329 474.198 cv
205.329 475.751 206.178 476.893 207.599 476.893 cv
208.478 476.893 209.328 476.352 209.709 475.736 cv
cp
204.582 479.589 mo
205.138 478.768 li
205.724 479.471 206.428 479.735 207.438 479.735 cv
208.61 479.735 209.709 479.164 209.709 477.611 cv
209.709 476.6 li
209.196 477.318 208.332 477.86 207.335 477.86 cv
205.49 477.86 204.186 476.483 204.186 474.198 cv
204.186 471.928 205.475 470.522 207.335 470.522 cv
208.288 470.522 209.137 470.99 209.709 471.767 cv
209.709 470.697 li
210.807 470.697 li
210.807 477.567 li
210.807 479.911 209.167 480.643 207.438 480.643 cv
206.237 480.643 205.417 480.409 204.582 479.589 cv
cp
f
217.413 477.772 mo
217.413 473.143 li
217.413 471.899 216.783 471.503 215.831 471.503 cv
214.967 471.503 214.147 472.03 213.737 472.602 cv
213.737 477.772 li
212.638 477.772 li
212.638 470.697 li
213.737 470.697 li
213.737 471.723 li
214.235 471.137 215.201 470.522 216.256 470.522 cv
217.735 470.522 218.512 471.269 218.512 472.807 cv
218.512 477.772 li
217.413 477.772 li
cp
f
223.404 471.43 mo
221.895 471.43 221.148 472.704 221.09 473.788 cv
225.733 473.788 li
225.718 472.733 225.015 471.43 223.404 471.43 cv
cp
219.932 474.228 mo
219.932 472.177 221.397 470.522 223.419 470.522 cv
225.557 470.522 226.817 472.192 226.817 474.315 cv
226.817 474.594 li
221.09 474.594 li
221.178 475.927 222.115 477.04 223.638 477.04 cv
224.444 477.04 225.264 476.717 225.821 476.146 cv
226.348 476.864 li
225.645 477.567 224.693 477.948 223.536 477.948 cv
221.441 477.948 219.932 476.439 219.932 474.228 cv
cp
f
233.35 475.853 mo
233.35 472.646 li
232.954 472.03 232.105 471.503 231.226 471.503 cv
229.805 471.503 228.956 472.675 228.956 474.242 cv
228.956 475.81 229.805 476.967 231.226 476.967 cv
232.105 476.967 232.954 476.469 233.35 475.853 cv
cp
233.35 477.772 mo
233.35 476.717 li
232.823 477.435 231.958 477.948 230.962 477.948 cv
229.117 477.948 227.813 476.542 227.813 474.242 cv
227.813 471.986 229.102 470.522 230.962 470.522 cv
231.914 470.522 232.779 470.99 233.35 471.767 cv
233.35 468.002 li
234.448 468.002 li
234.448 477.772 li
233.35 477.772 li
cp
f
242.9 476.967 mo
244.335 476.967 245.185 475.81 245.185 474.242 cv
245.185 472.675 244.335 471.503 242.9 471.503 cv
242.036 471.503 241.171 472.03 240.79 472.646 cv
240.79 475.853 li
241.171 476.469 242.036 476.967 242.9 476.967 cv
cp
239.692 477.772 mo
239.692 468.002 li
240.79 468.002 li
240.79 471.767 li
241.362 470.99 242.211 470.522 243.178 470.522 cv
245.024 470.522 246.327 471.986 246.327 474.242 cv
246.327 476.542 245.024 477.948 243.178 477.948 cv
242.182 477.948 241.318 477.435 240.79 476.717 cv
240.79 477.772 li
239.692 477.772 li
cp
f
247.528 479.545 mo
247.689 479.618 247.953 479.662 248.129 479.662 cv
248.612 479.662 248.935 479.501 249.184 478.915 cv
249.652 477.846 li
246.693 470.697 li
247.88 470.697 li
250.238 476.498 li
252.582 470.697 li
253.783 470.697 li
250.238 479.208 li
249.814 480.233 249.096 480.629 248.158 480.643 cv
247.924 480.643 247.558 480.599 247.353 480.541 cv
247.528 479.545 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Infographic Element Collection 2 up-01.eps)%%CreationDate: 12/20/18 7:28 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpO9-`qs\q7hLd-J#5/[VDpbN2FG#HC6ns5TloBRnY5Oml<)c[fEY?XKh9T[FL3_qGAI<a3P+#2D`,qBBrX5]&[GC"7e6^(i%[\I.sV:Xme3mOh9EHi)141JtGrU_Y0VlAO#Jkt&<:%`I[8Ppa%1Ego+%lREhYT\7CWUFehUjfA.,h<p8oSJ1/P9ia^9@4E3<MM/O%!cOg9:3'*krN#aiMph[+hZIf/4'\+2%-S(@$a8N+J#=t$G8`HaJme_2E%J!2>tI-gE7a(C"T9qe>kn4_2!EmN&9&.b";0/DorCdt%FaQ_6/<-n;2174f:haZ&_<<Tui9udr+1?"FP8T4^3(L"LME&7`]*Eoe'E8Wt!kc'eG*h(u%(^h$]0?:AFe]ELp?Le0Xb_l7,4OJ5%FWSU"36fo)6*h$[0-CJa!Bp%(q'YhqM:4C^Jd$f#_-93sGSR6>PG%mFr@EeF1unR(=+C#M9oL.Q/<BpjS3rG>X;2?IF3<,W*-0]V%"/sN7Bp3:OUU6eF2u)G'!0RM5C,?J-W):J8Y;dABJ7)ak'j^e"4,7+XNYW3(IQq4T%C!B8'164InfiVPrh,;gJ/h;U=8_g)e,fOZ%LP[5uqCfARNup-mSn7Gk5S,&^WJX6,&4`Pt^h0JB'K(G8@)/rkOH:n&/Wq%Cc^*2<'CbjG`Zr=umT`V^2)0f5WiiiZJPM2pK1@qj%Ra2>i!MqOtqG\84Q\d/ok+AW`LM!rN]8+f#Di,TgT7oIhXYe%K&Ms%(/fS;jm>X"c(%/fNgD8XU.2n"K?X<'5Jfh3-W.jL`NV*:O%i:jP%rpBb*kQU,,:%%3(s81\Kir_"%ea*.hbk)]H;DV1ZI(T@UeOXM6d7[q#Gk2;*_#P]]*Q!OjH`Nf0+N-'$%^(k8<pXZGHDCNP%`f>Rh`M\,rff/qP2/7pRIrBgd.?#O/+cX`96r0ALkKHKQUaU9:\&@ka*:YiQ&U[N.`:firdSeHC+"[L"[uUqeNI,);SannrL*SV.%KEQ*Hs3?bD>.u3b#<Y*`(l^bD/k$DsAArlBSJn_l7$#8*Ii&r&@P\,gBDM`bH88+,ZVBI=#&J=JkjDDCLua)RJd=WtQkM$bdR7h*%K9;V60u@N^LV]]rA(dQb"8nG:,MDIr>nr7dNuG,?E"?@K.d-A#*E"n9/*/8m;8C@3d=W#47fV07+KRL"2^,*WOW@8N-G"76#H#Y@%E[GH<gM"tRJKU&oVsq5im487l]6jh_Y^[dm2O+S;&A;66"S#4tghqXkVo/2)^G']R[iOGGE5_0^4iJaQ@ka3;F5&G0oUG'N,K2&;%XhPjN7%oeeB-XL1.`I>0K9gkgJSi+@'oEBF7&c;HN!>g;E.PQ/I]^<TjesYq_EC9u@J&GSj7,Vo*e+t#llPT"Qq;HrG<oOpmGUZ/%_8!"3)@JN3N0R$b1=Q&pg1.Bp\8p+5^[h%1lTi*TEU.'BSu(td3T.&\q;$;]b;#Mb%@-ukO&@MHXu3;N-thMm4("!k<&pf-d5Wp0%Pt*0Zk"71dbg=`X6^Mu/,#<qP'q1?:R!4YlMtmG'#%_&5AiPd$G[3%2<\GH#Zk:bML/T(%_7!^29nSn`4Zpbd&<rr4!*8!U4C#V?%E#G0Dh>%lIi'L)56ZApmJNA0R!KRhj'2&?hk7mEU!Zj!95;iZbcksi:a=E-UIT-rYfUeU>&u`<DG0U-73T/j`5NdR[*:TI#So_]>%O99fX?k.D]:+)5--LkG&fbe.GlLtgV%(*Wq8qM-j-9jCWia!$qVYFd6k?,&8L@(o/?Ndk9oml70r6goVf-TU,][uD&f/[Zm0Ea:.%m`"]5")Pqcf2li*qqkfuPp<$Y.e^V%ffhf*NnpX2K)pV2q_dDU[D0jmG^=[3_H7\Y0'mR^07JuUVDr#qoS6CPD%p0'_p"'KHtIVA%:1A>-^DSoJVokiSqo,bZnk^T1e<FCHG9FGBn]R%o]YoPmdfZ\,2gX+"!kS*Rg"q2Y(FUfaq&\5c&n?DBFr$lhi#ecuq5]kuJ%m6$%oH&P*O_<)*+`-uH4Sk\'+uP7FZK4GGB)e`/M)PQu;&3W"du068k-W%<W[>bMqf&4O3IB+k9pa]kST68>6#i\`Ft;\[D#3hJ'bhmu%#A#V6kV;6aA*$0rr#I[h3CidB\\s;K^&\h)-J6]KB9gdFT9B4:f[UtRn,/WBq_,-hZ.p2sB,A/:Kq;$\I<[(6<*#AcE-d=-8tK?[%FJu5<@$^`&EL[gdSJN?hiIq3GKh!SL,*OjDs&D0'FgS30reL3>fY*.gn]35u#M=kT]=t:@^a&E!@Li,7=,n_!jP?6LYp.+(IYF<f%%f;;J'H_]g@sqghgt49KIp\"*dBaEI<)Kn04J&qAk?>>:A(1GUAuoK2k\S_n2XOdYl]53KqI=?/iq]R;0k,oT"?OJYI?VgGlLNc'%H:G[N&pE?iYB\=Wl(*!j2ukq1Fs)S#pRZQT<?B#JMJ#hGdA_Af;a.T4Tt#WA)I_)D:,['Sq\"JNHKs(>?S6AA`V&Zn,.[[3QQs%R%.@\Ba*k(1i]CoDV2\S]rGj"7C8mTD6Fu&JV0h/)#Nm\%d,I&:"5I"/'AuFgU-5br=nHA2-j@Y5SnZR9)&m`+KMD]US4G[9"5A'RL%G13A!Cj.Y3n$$:h:VcVm+(\AY5*"%W*Pd[[<u'gYSPSd+'ZK1.PHb4I1&;,ui)m@)E6pYS!C;m(/GC?L=UPHk2,TABfD*OOTlD]^%<JhF?mh>10Iu;WW^$t\F!Qa0NT08n'RSdKJqB2iU\,Z<1\mh3+b)^&lgOB*M,/oR7,_HKo=5<#)$KCnd?_=>Hk#rQC*Y=,5XhS;*%d1jV8mmQDKA.O.==#!mZ(VX>KA#e<*p3Q>PI/dA"Yonp13Sl2FQ;X=O;r<n/?rLNT!:Bg6*gP2<rluQE0:Ou-4KnM>QH^hukYt.u%k@HGimbiFa_$<N`O__`&;u9=.h9>[nOm?,@hSP];O'=T=*2?I&:$73dkCk_LO/1dJi\VFr*+1+RIc8Ms$'om%DW-OpN)%>4SJTQk%?+.+Q[EK.f3-0Ur*P:S5E=6ED@rs2tn"^cF*5IRZ=-Xl@E2NBi(=">KkZ$oa-Vk>FcLRS0=F$hSq'K.6n6q"U/4_iYj)be]3?;H(%]5`5e(k0\kOblCPboIPK3NO_#_\TNVguFQHjS@EMCP)Qga7GhgRj.al4576NI6/&<VH?mFp?c\R1,QN2^E(&IO9B4^Fs>N)*5.oF%gO[rCIl_g9>IRP:DWf[>Cu#e02t=7PkHN(u+(jRJ,QB2K\0j.,GZLO@PfWm>X@.r.5:b,aM8[#\&[b^169lUZq>k@47;mR!3!S_:%NVF#3CF&VOF4_g.7E4;EdJ;)6D4Q\-V""c!mgPE/3g5;cp@//<h>9cCnQN.7Nj7gN:'_HFn`BP:O/Y.M@qnj%-_;=X3Ah/7gA-gK%BtV1GO;_^8O/Z!6e+o)oj#Eh=<MNt=U.2iS0;8[NKu#YAIi(:Es7?1;hibDfI#uUXKMk&(A!12g-%GS#huc.bIk'1V%`.CZFMkn\%V^(C#W0>mCIZXCG\aAf^P8V>i1q5U(A%4_=b^G[h81edC4hIAs^c(&U#XlTAf_"JC-,k],6!9-PqAliL@RQHMZ13$?1$'D.1R0@X%`:FFo?o5][-9/']`LNM14YU5&Fq=EjYB*=-o\U`\q#amdktHT>Mm__RM!l2$H2dV%s*VW[o3hk9T')`lo?ZUqkO\WCH2^r-ZTZW!%TBDgM]ZqTjq/"9(o)(9[DSd9)(D8n[oK:G[+)_VQ\>q4E3Tp"(o6JXWCM#>HR;!X_kkNjn?S6/EE0@#G/&dPpL*IHr\+eh>UP_q(%I-l0VUADf90PBkh2$LP0<4T9dHLL/E$cQ_,:(KV(H'j\r^NA6Xn]:[6+=]V#CE85^&,n-M\HI+/_,9A.gctMr5Nu+cLP/[j3o%7U%GHSi3:>-@&dPsE"KBNpY"!:#AWUMQm,&oM7j8CZ#A(,ktm,nH+=53\(ifYbaQ^H"M4l8mH$fn&\QV4)L0hs\7IN2=['><pQeXn\7%A]86Ek.Z-.9U\aUb(@Ys5m:)Vkg/`>Yci02^DX9:#8Au&?i5WrejH])\7DrEi]#p=Ha;QO:jG.SV,!g=[Es]hf\UX"k4W'(3>Zb8%F"ui_bW-J\cGc;p1$9sC3C;tb0BNP**Nl8\0'4.!/pf55I%Zku*IdCRX\1^Lb#CaL^J;6pookI!pgMp7hi[8tlPDd#:[ui(TlB)5%F!s9'ilI2D:sP3pnJp`P3PKrni6hGK+8H?`P$i&BZ#:QJlp?bY(W*Ghd.7QFB,>l;TjO(m*P37ReDm'V#<e\qoqP9j3gd&4;m"n2%Npe"+O#b`?;<Ti+=J,G<rpJ.Xs2MTF5OdS4`CH5b%k]iE!9(:Dq^_XcBRc'h'!F_"mi+Yg3?j>FX33@`C0`iCUIG[s%*h2aT^i"I%k5*T/5aB7ZIk!s55BD<nZ>_A=q3l@&l1!f)`#X+9LUn)2;E5cVLTFle2ZNW2\OSYT^PVpj$iYh1?]NM`eNP([r/jtUMc$mW?H%Mp%4O3te0`M\XPR%&7cK1+*c4kZho#GGk5,V]c#lKqXLN5f.jc:(rOAF+.SBE#;o#EK<olKrh>lH^^ncqji=mU[(>j&KjUh?n:1tH.k%nqnWU0,!GT<_/V^UbB`gp[;,k*UTOoe+odHR/-&u4k/Im^4-$]6h)m"?&ZV+2#]DRV`j-u_o>nfNo6.:YQW_8;be(Z'O^5R5p!hX%[<K>kbnQLO:ZXu]jVXO!dlsD=F>W/6*FMMF1c8.U0!=`2UN8UolK!thqFRSV*>!+YqI*:b_j<@>S_2moLdU\;``PiYY!siJ;uT&d%jl"UPr^eE83N'K1&h*\bQ5\*4^mrX2]*!)4'.F+"@s?Y;%(ik0o)i'f*IuV\X?p-:N6\$ns6#P*[B!j;eH(nD;*=8hBZfl?Z)c5R%KgFI-9jfAU899)WJ)jl.VbXkj%or%q/g3:=JEIpAaAhAn"WfL\Eu)8m:<m##5KX$Ba#<*3n=0ZRZbT?]_,"@XVYE91e&qh.UNTB7%cY;=r6U.K"k;;[u#+j;Zdn^(Z5;3O/!2l#P"5=O?+4?Nso6\a`^HVt1UH^%449UiiRg8r6mmAMKPg61)*60[pK2)q:Og"JLp'D]$%"%IJXE^!plKCRCAT<Ri;)#c@]p1`]DI!)id"K;V*Xn,AU`-UIJR_M;9YTCX[#ouiJA_95CnhR`%qWla,+7`_3;c0QIO?+,Ib!JBV%4dGl37FR<f%Wq'Fe&/QU*'ntYZ"(9G>>mc6jS^`ZhiO1o7LqR'=BKq5b6@>.k^`("V!nD0])o#W_Jo+SY:l\%:'^SJ_5=.[_d`L,%r$K\u2rFLQ'GW:#@cm:_lf!W@kk[s8/GK=W*;Het;fQ&tIREqoSdU1^($d(;Q^Gu-R'p5-s)Ri0'HaQ5PMjJIV010)?]GrcR_JAM%UONnkV$YEVPn0;Fr^WjiUj9RK(.*NbN;XG`ro+m,RK$mK'L*^dfRE@8,G`:\%h=`1?TcB?k<SNd3"UJX-aWj3qTtul\*)u>`1j/N%nFY%YVhSS':,dLqR1fchEg?;Zr6a3:Iesn>'<\>cG)G<CVZr"Q!Lk-Knhf4P;N(nX%>ZFqLiQu`rXN/0*0EB75fAJ'^&\h)-J6]K%5N#`ZVrU>Y/K,_E&,hUuX%@oF@DolXce4!no>L:+]27SnqoE'AEfQYqkh1Z=;q?-YDY-bdF7u7ka+KsYWVZNiaWlh)rj`=q*L?W8%EL`V&r6uCAIc+;iJ*o8ocA2:7@!R'r3[m5fk]C=G;a/rMJq:'=+3/@.p)R-X_S8uMb<&<nk,ss7g7nBLW7eG&[2aFVftZV5FR9:A%GH%<%!KYWIr4k#O7j!Z[V-<u88YJoV8.k`[3E*l!3+tPM6Ue_bAG*o$<PNuun2K$Q;a$0$B.a@8^YBk01sEe@lEM973)9QXebm6r%18"&NLA.q8fL69Mrlt7;%)Bh5;nS+\e5Y_?,Ocdh`GYu@SL*K0W1k7>T387rSB%O(o5prHcN%sp[gjp'Y.aFT#D(-t^&$t2PohAi%%_ioZs)3]tmOW8505g"RMK):<o0O0E++gC?1hgdK%$Z8/icq:!B3%da\Q@eCM^InL:/<%mk1Ol&1&&5!ZHaS12-tk[O+9+.6B_)b%m!0K443$g(@sH<IXRq>NMKCW&rpiugn<OmIl!.*7)X)c7`5g0\:?"WM.Xn&%R_^?Pr^i*>K>1FSF$M3RU/,oOFcr=P,BX0Z@RHYd%=6Vmcj6gPpra?-Y8Rfbf7A4:VU.?[,47A.S*]qV]#<s%ZqR*#E1.j;H"%/CoR[INmjRT6H"QB?4s18!U8tS02+TE]QZOM0Q3hp_]%VUY&`pB0WPklL8o"#fKP#g*mD#,n1(@PT1u72&'p<NT;&_1-AXE20R&*55grKn0*JiU_CY4qG;F#CM=D>km,@NuL8Lh0t\,hEbGG%f,*L#]Ukem2PF<Ve@PS\IMBW;/%G6k&4Bf$5<L+S5.H#F=)gM&.OV]E*D!/#>(_nZ/*utmW.pEobMjL2[4]82mg8hr.#1/$%<=H'%&TA7c";0/Doa=,D4k.=F$qkXVAO%k-qV/cbc24MEDjt"/2L!"RpZuBh_r*('ef/[YTkY7MW^r\UWVK4.0EZ!r+U%7QTg9b5!#OLb%08KhjE#_/_b7F(;K:l9O`o@SSh#%HD&HG(eMms=b3Z14hXp$-^:XJKPEPqGD4YADFPqV':_&g7?JBJB,lK0aQXuq0[($\4Q=2Eer%DjT5=j$s0R&<E<m6srNhK7M"'G_<%)TdLWr'C#Z?J\R,7r2@fZ^$YNe5'N+W'4A])%WE-?!</%p_$U)8?pA<9Kt%<EJj@$t^Q59O%&dSVm:^Yu1,S1Z7%N4=r\XidY(M#j?7t-Ihrnrr1!AE@EA.uc,bE"5'N5HA=+E38LY8dJI,S;#Y+!QHN(Pnb5^]F/k!sF@K!ptU@%pb%.@*q%=:9J2o\J3R?MOO,R%($Lt$'3q80EoL6Cai=_`O2ejM2-6MZNV8!^P6/CtJH,&QJ#*FT\k@&6"[$%6BY_MoljY(d.%an+%4tdnhbI_/Z(CBXk!(f9ch$04Z\cX!,m)//^\m8RE/tW[EE$PFX!&*+KTf]a14cl4bcRmQ3P18?=/)Ua)C)QY09E?TTISTT!!B3u#%LW:\H0#pNn&"]]RrVDlZ\m,9=2_[c5*/Xu7VN918T?HQ\`m:[d]Ds/Ci@s8I]\T].d4H2j)rVLSLBIc["&K@j^YfDG#[m9G5Bd,S%_o!EFBW8H;oe-(Eo#d0C'gOoE8,T<P[k>AuZ[=r-Lnu;6GNW+Nk5mL$:d]k#D)l&0I3&o;m/.6Znh8YWpUYqtW=I`WNUR*s-\;DP%_XR\MGu-^i^qdfH#8W7*n;Q)hd'`'K!=Hd8*<?jEIDU]Yc^U@,B7ddr_@)Am;I[E)&;[oUj+GMY4<Je+%AJI=&eJ@$Yi&DZ2u'Z)%e1?U>1LdF4W?JZK=LU6ILGWrnW/E#-^qn(GIG_m_pef+]Geo:=D\#Yeg;(u:gs@/H",en/?4SER#_E84qun4D0^+3-"W(V^>k^fU%kXrM7`43ImH`JHZ&]5eH3$aqB"2?K!Tsb"8Y/,J%2@tO_NuEKp?&F<kr'+%p^4'"XF().aW]-R.;`9W?QqH7U/q/Go%fR+(S)F#j%(#=<eS'ceaMk'4mGOZ"<b9U<gcE=f_h_?"G9]m3]1L]mHg^CKCpDKBBMl^\S&n^O_M,ItY9lU>i+fX<8htQ59DA8"p[dV2992+;W%Cf(AG!T@_MlkP;oIf.-d5Df=\Ur9EVK>+)dIfdp!-kZBj>WjB%&,fD-lEKM39/K&?2eQ6-o"C@UhoT;__-dQOqE1E[9#^=mlU?G1%SpW(Vq$C6I%"9;'2u[DH?q@#9lF,?'+DPO0a%1J48%<L^nQtW9>(3[R<IiM9U<fCf]b_oeiV+N!j>9G*44*4i/9!LYI)&cs@`V7i%mDWo=SSq!GiC3[9I>n&!OcfHW>jOZC?4m+1"Hu&?iU/]fa%pCrWVNq$mJ\/OV=,JB"D=u'#_,$!No1/_U$E*Z"sr7SC(0PR!pgUq%bn;jn-%LaJ_REh?L?eQi!>hr@ITWE+jLdqo;\fkq<1f@6/N,$c-u":$Ok?957ZW8.-YTq]@<<SdXDH1VY0o4MTh2X[I:;%;A$OH<%%XoEGRoGr6c&JP(=&jd5F&-(WG/fO`n1)"XLC;=8kX'"KC7F%;(*"=uRVi\bm9?5A_ts<@(sIqBZ&-4Q_&.`FDIc&`retf41rDjN%0Ff.t;3)pcV%=mZlGT3he9-^YELQZ\Y?SA%+fK#3MR=<k_c'gi6^m5>R:WuVQp^sDeI-q+'+@<=/?T2N0:0t&2%HX!fF4ZD:QmfL%gbf/#l12=c,1tO7.(J`uW*Q(:q/4R>.FfA9Eu'_!Ra9R8Hb2e%:kpmA:f5\/"n*,rM7S]L,j3&:jJK_5@p0ZJ5kmR9WNuS%(7tZ0%CGa>pXBHn".h;[>=)_cYj9S6r&Mt*G=)V($ljVgbq]04(iqD<QfQ9*nL:Ffac'Do3\HD9]4,XnQf^p!"1mT>9Y47'1NW+X4S+qK7%3n#HYX@nWXqe)\o_TERiGsLR-7J?s7om+5gY<4I70e`7/V&'lK]c:@egtV!a!]Mu]M;4@:'e't<<9GCYTgINKdYtau<<IT@:'(!r%R8_";GaKhb]fDa$*>k!j88O0m#_q8/fjHNMhu+>gYW"06>/24FeH%Y5\7)R"ql.IE^4f8fAd%1`CUY7eaP[l3IJgi25r6A.!B;qO%n8(/m8YFksP?_3>!ZOCPTFX!HgXjK/Cakl"1]O^Q2lCm7b9"(rTbR5*hP6rr&QgIm.?Ak?RYcRk""n.9KB&9WR,S]/&RQW1=O.TP%?tmhs$]V'5iUdORM?oXjn9U>hC5)4*Zhu=J>_>UhG0^'pF96QiMh-)!'';a_8rk605_idAl9Cs/6_J\JJt;UHP.5"`3:p.aE)*_L%dYK2mP,]oOY@$+QcQG@g27J6-?!WOkY[W/k!8V'2P"X9bG56Rc?+-H@Y]m78le-*AVgp:kVKl#[O*]n+6e8)!5-Pm(Cp+iRl3uu1%SUs@BD?VBoS`o_dK="OCnR"8dS%6>lPJe/:1Fu7[Qc[Td=_00FC>`VD@t@P\TQ(m;AT;B1h6K`I0G6E`EEdF8-EQl+W'[G5H5q_C%&]Nbi6m4W>ab;6^!RcK!Ju@?HNDG3K2J!1P+9oh:SGt2o1aJhP.<;]/7rLjfW2nAI_'XY\'%P%sZ'24+XDq0>6o[o^@Qch.*Kga4%Q#!!r\U4-<E%T[2Yu^s,]&F1c6r%QZG3\k&7r\q\flX'=19I">EmJ'E^&/9_2aAFJ,`1Q0hK-(Y-)bkE''&8>DqcK*ha!e/:R!F>%Y@>NZNSbqHg.bTZ<3n*4mP'#=HMUmFB1G=O1s*oiCq(Xc*cJhIf.SLHU5ntM52k:]D/KAu.q7'*1Ed640lle@7oI/$ea_=_A<sKr%7!WRY0EF:U_CrRMgto+8!sZZ-n39f9q++s$1CPB!5bsG7\"Tak<tr:?(gV*g%%Qu7s"1%U/X&g:P0g4:P+#jD,i,7>2Y,i5!EEcI%%3Yss[eSJt.2NrmN@"JWJt.Ft6V<.TlKb^-fODa/)Ofpo1t>K<mfq8VZ8,RZ.%TE'Z7CVC=`BC))q!=78DtsBL:VjO49E.8Z%9#>%oh]Wo?qROF82W-`@PqR9bQ`Lt&N:789*.V7?%O3E\,"T8)XA%j+3(1++T^JcEq:rL+W"Q>#@HIGhT_D<+n6dA'GUSuITVBfpL99S%Y$S%=s5>6->m#HdaR%=H[:S_EKb3FI7-t*p1l68oXi+d*AoYF#j-\gnCfPph<lW]o%4>Z+"Ja!G2&J;D@&l18KH"46n7N(pCOs@N%E65Li;lW9QJ7O``r*[Z.R!En<oI:\=]aCrSVu]m!Ad)D/hWg=U;KOX^ffd,73MQhDfJ[P'ld:+c$^)6e'pAjTKs"n&I7Q;#kEB_;%1E`R5F?o4\Q)8/?Ra@eB!qK#r=OPU["dlVD\.FXpLa50G0\er@NmS>&RF-pVL$6V<OsCNN-_;]N6j9sV(Q^1r^Eg:#6BQRQ:C"ZR%O!skn%Z\A;'Kt6*+&@RHPhD"+[e^#*R`&fu?b8hIoO_Y&O$#O2BICuN6q1%(.p?"q"mX.r&u5J=%VjQ.7*utGb4/:b1[Of3j]W60%+PL:Q%j9<OC>"oFQ^+HV(`t;Fm*Po_$=c4b8PQgV1p:,R\.+7rZpIAYIOXa[Q0PXX]<g+3F0TU%GDk*e=$'1).&kjGX4_E&br4'P%Y-XC$\0T]/#iad$:03fTPuSIL))i3R:`HoL&.nKah*:0]%6UK*hSW'M>0[&?J_aeEe;:jsE/.aeh"iut%&[P:]Ee"FrrC$/RK@$Q%<TuhND>SC"\q:3G:hok:.rEdP[uTuDq=;rTYfr+3FIrbgaF)^rdpu`m(!S^TN+9F^A%Ff7+c9VDb<6cf]n9%WMj_Xd?EhsPm&hVi%a2G7;Q@fC"\h_6bQ6(<qbMM=+GUIQ?*=Z4GGZIb@)bk$M.Zg!33S\F"-#[1U0X=e]4SFjTL*SkjB=%ST%HFMp[:ZG86V,R=\tdNU%09#-.li`epAKmVXG(fO.)HS7IYkODRqP?Lq5g$K$^?NYbE2_N9(Z^Sn$S:,/WR7m"*mNtW&r1CAM1g[1$A]/4$jDfamRp5E'F*Tb%E]+7Jj`E"MQO?*'0q<Hu0R&bK3F$>jdebj0Zri^')7;76!%jP*H'd7qbI;W(UuNW^_#ZHu`$'/NZI&s\p[0Gi#^1r<:s=1Kh,HuM%4c<f%"``S:ctpDe3J2qeRk(PA<kJbqk-3d+=M1S=boc:&YjKqLP2&bY)J$E9K2^R6J#+X-Qja4>aDd1l@E-4o#g7>&b?8f%KuX_j%mgg0EYg$X=*9rH%8s6bVFUK>*</W,=lk1Wk;.s@Pn-[N6@Rf@8$78\Y)sa5K,2"e=OprCs4I-q%P/MsAM+4LA#^FfX":6/b1n)WN%==Y^[R_*7_ST\'*_/L1=due0N:skQai@BnBDBg'P-XVpiWc9pfA1N^j"4b$Z-u6nhB7Ks\eS*/[BoU,Ae7ph;U/n*$GfuN?hpjpk%MT-C/Y6ubg\=hg,B#=R),f,36)Z7teElg;4j2PRG_<9["lflY&/rW9fBBH$l.)MTbmUsrg#fklL.c7a]h[@8m4mlr,E:'6J$^2A"%I@1Aj?3fE2*.^>D.XfV+8D(_c"ZFf[F8GEl)dM(!i7jY6_)._P-T=k?g/5=8i51Lp:U;L?IY0k'i(n^^-2M5*(Duo\oHmk=0$X@U%E!_,Yq7MpAo5&12'`%(,pWZ0qDA1E00@TNG_d/:*ge"EWQ>!ueqJ7KmE<074Shf,[cpN+ebj3`S\bhd>)+RB09$\+,Ra>b<Y&qKc%EMY<06HDe-XoJ?8QsJ'YT<CcoI80Up]dok_-_7#(e@ORn8e:rB/;DB\)$nHmN:6S3U8Jea+H9,(l"oa+2o48,FqLB]/3SX?@q*hd%)hQkEG/0;.I5P1m-S<I+7P*JH]Q0[UjP>5I;=DO6ac'0]J`AIFL2YDhFEAME(oUY30)=^X8WH/d>Q!lK8;]fLeS>o@)=1FXIbui.%92);C4F<JJ<.2JYYE^:Uq2dI4.AQFB=O1p1Pd=FTpVjf>pTJXC/8;1_QM(\#RMJ8IL+PS`&]6f5debDQ;+DO;@fFUM+Ie=FY$T/o%d_P/<:EIlPNR:_B"X[U$F:m7i;7b3c!%2-U8UKt'+^O:JN%07=N0EZTl.("VIO?pj-g4k;[>ol8:d)2;70'kl,oUjLaI:>_#.Xk/%gTC"1Z'u$O*SU/$rod*)/!]<F96jkCj^e.i7V>3X)BB)Q1tmEX<MN-p4[<WDPXZ<:Z>c=;JQHI,P?)2-\p`%069tu,iuDDl$UJ8s%:[j]'CSCmO?XMP_>2tQe(k@\6:pr4cNRmS5dcbN3/'Wdkg=>Ec5]mNuWY`aj0neUEVAT-%0kVDh`_m.*1tHGZ;IaK*[l!g!bcAb2%[@9&!+VE*EPM3DKAc0'XX^a"@meMi<j#('W2*RMt=lW"6ZmH?f\2D+(-a*j4BV%*?*]tuB'/?lmRV9'1e\kXRTdDrlXdWeAP1HEM%F<+)q5[S31[C<XmYFdsm$ItP>;mO^_RPLc/BWbfFZ_h@('f=Ou"JKND.NZhDEdOQqc!RlI>KW8Zgijqe!9NbE`ij[%-6G)u9s7:?%D:KSorpB&=1[%?PRLof>2.H`Of1\MTD]5Y@aD'LWm5GJiF60fu!]JZqB$#q]OOP/TVU=djes_I>>!&L/d39;VXEC;'M+XuE^4qO!%^m3<C%>UgAg8GUqeAgab2f3;/DeQK'-',M(<$8U1a*^lkm8lF(3dEm=hQX,Zp'q-%4=3V$[aWTF[+u%=49ua.>2fa.0[\.:['Nr/%!2-R9)kTm[TJ(Bk:Mcg_'A^+BhXKWLW;A3?o,?Cb?!r7=]$$H05SpW=hWrTk`MtQJ5dItAHQ:G`*j7`<k%ho<]@31-\u4I[X2AZh%Xi#pRM=/noH<'3Pds>c)@gn4QKshm=>Sq=WiJ$qb2nD8kV:Q*Yk%8WGI-eLO6q]>\74O980CnOarM!b<HS=YB-?@LWKQ7lic;s<6%$gA]b#*mX#@f4*e04o%GU"=t\&X?[@\@jBXX`NNt*kfFfH68W\l7]=L;10&p2"\?+ogiF=7EkU_h\"JtC"Z_h1HBp5pKn6!rjD>q%e'A63M*]V249jiUIr0-A-8U:pY72F;2>"]r-P@bkhN7?:8qtLUG\Un1C_=S`FfoMq&AhooinapX1u3<lk&th#BOKP;UE+R8)Ek2M%LG=/sIP`BEPfHn)2YtGI@l.e6';h2fGs85F#JN:#EDeE2N9iMF"8:%XNG)"G61EId$i32eaD6;`A[:9!;[$8l;fgYHQl[?SSuH(e%Ptbd%nX8$?8S^42nXeF%ZI[8!E]Ilp4YmRhmOc\NCQ<DlHs9:PbqG<YA1"$F!6+k*#.t_"qTWbp(`mc7hc'Br'$GXAQG!(r[p0k#%b]654cP@'Z4^,kDdt<@N3Y,8tH2(om"fRG=SC_qdkndl<]s=J+CV+U[>;7_)\%YlE%P+T^qc.s3WM<,?>hQuZmF"`mfJ6-dYZ6%/%c?Aq]F5)!omYl#2*OkFiBle+"l_@Lm5@dRB'3B*hH\i_=p6PI#D1?hI=6sEeI:Sr\mh(=4q+u)+$sh9n+3ad"8#^'74'Lah$O9_D%aZIT'P]UYumRsIk?LKoWI@\uXRcg<6eI_%ihVT$>SNmb"cF;MK(GV<jQ\bN.2b%7_/;k4qRLX$@dqtn-mIh`&!#O0%9P'J17Bap1%1t"(=ciSr$cl:-r6G$og6DsW_bGB\5&h[8(BQZbC%-]7<T'opn(.ZXR!]n*^XfO=ic0<6tmIQ]PgaV^8NP"=K(>Vd&Mn&Yl4:HJA%m4+jYH^noplA8dB%A)RM<U73'>d,:ImXjs_mL.$M*EuWaYjL%gF/bD\HfM2r]fl6(n\3[-I\4TBN;3P=9AZ"03ZGeF^!Z@m8JC?8%$f2d!Q:I"^+#N_u^n9_[9=On$e2?soC!,FJqTu]NWpRT55!KF>;Fs[B4rV-B&>f/;:fiXgJhF]8$RQ=b=n"I.\dZ=2(I6j[QaW!0%\@W6)Z<@^A=g;5q%Niq^6o1!,l,+;`OpZP6\SO6r2DX6'qPbJ&[u86[M]qI\`2*!2``'(ZASopI>[i7SoB"`brZu$7h5);m9A^`"%_FD40Vfbjob_f_Ne<VW4d7CkG'YPu!$IR.I"`Q[e,A)[th4>P*U0$tcX?%l`@T_3INmTX6(jB#%c?R4p2T?[_]dDU.N+WIAo@#\X%`ZBq(VLLNu["n$7imijEP/b]8CGL,tT-R&cKMF]YF1UFkmTEQdPiKpG:*j0,BWAnS`RLQMCS`\%kP_d&HGu\<<JMgte/fpaZ^49/%j"s/\9JU!1B5SbJM%!g\gguK4=!el0Ne5q7I!h.F<`pcI$(3"uY<DBF/"!L?Ph_J:=38-Yc#b!5Q;[O#N?78$8""%>@NgL1>I,"q%,g>E&_TbG$<Hnu8kb<@j\gg0hS[I*`Nh2-'(*5&qWXhcPErXoEJKuuVlm9K69`b*n*9jtr.Xej99N]H4f#):BN+uO].$72'RQ#o#%nsTu&Y,qW]kUPQ74C#;-\uVmRj^YmeW+<froJ>L,5%s,fl<@k:XLUffY#^?Ac>+HoRD%06%Hc8n/>^%_##0E/rd%uFRHl24%B7D'%YPrhui/H26=#\*Q'0"]'EmB!?nQ[rtRMtRg[2EYt/t981WS/>tKC4_qf@&J#+%i5rqaUM[L2Mad/am``D,j'Q8o%hU]XH),L.A(Y%-\d8Cp3f30D:=,Nk15lKHG-Fa:#Xjc\C/!q^0LI%dSDgX];Gm8i*M$JKDX#o*4p.C6IbrZ@kL!="30n.EY"caqTn!]UH-cO4Jqbh%rSqC3(4FUn3=ID9;tqilICct,Pb4m$l$rD752C9[F$Fmrr0Eh4j5q];.@<q]Vft5.^6h';q+GI[NaJA"fH,35kWWI\GcQh[a(l-#%?Dq.R_t@38gZl7_?/!`/pB"E49;V)7)"aLlPmUXNB,eSYYBpQ2T<oZ`\>P.-nQP!;M3FoXIGiDco`it?m<gT/`8*eib?Yrc)huXW%bYXajqg'/%eXViSL`Fl#iH[88M<gYX"#7J=KBVpW=6gT-)irRllYK[ZN.V>?5Am;2r\="*_oU$FFb%,oU\I6(4,H_lQ]9,Jfp+-a%NM`@gRPCOte".50:c?(@V2BPBRi6FEQSTFUe]higcHD0PC5OM>>MpgmI;9WQ/Zj"SE'!E3C=+&[5KB/aKAcbuQW^Rd2"Am.c.$HF%-PKS[6TqKhR8Qa\CCU$@&L`b%S=>J6B_D8S$V4k.0Xn6^Z^o(l!tcfg!<Mh^_Ii^("Cc0&cpgOJ<uFZEm=N76pL:pLV,LEf'-)L]%,)O8QVf^U;JObE_;S<Z::%1"4Hcg90hc_2/j8BZnTd2Pi?-"pZa*t,jQ&*DBF`cdh)tP\7ZWV%cemU..."-GjHN:l8-*JmsPpPH"%K6-^Sk+5!IMr'.F8PRTM,mCdd)`*qXq4p*k#]_e@]G$:SC.6."?o"M3[?>_M68cJt%(F<7Q\3FZN*EWXibH%5\%m#1E0Bn<"X&7c%@MT5SJnBL2oXMQ(K\KE=>X0&7Ac/m_;hZlVS0$lAVF\`d?P)7q&0.mBJ4+hU8dUnHp4>D$R[?>eZpbYB*m*(XYl_*cWW4D)'4'mi%!Y`SY:f81EOqhee]>Y8P6JTp;\CH.7l*o[#/ensD;*mdKVpV;7dFML4r?b`tQcJtKUsK?9S/;fq)Ymff<#9DA3.P2L`Ws>U\n!pg%"MluBc(iA%8FoE(T2"rkWf+,nljlk[>&PWYTB9T8B/btm9!O676(HbObPP"od'tdsJZrV$mO/W<ah9,Y9!EZ+`bt7f;/+k"*la3#%Sd?tds0j>W1=O4"\#A_H.hrgK2(T[jU_#)trW\9Tq\["^M;nZ[En1*5?9Of#'.*hUa$Ci@REbF^>iD&TY5R-Eb)Lg\]:/:M&^qaN%/!dmNYdTO8iU.7C1RfUs.F]IW;mR]R/^/17J_7f3S5K;-iDVUdrIR(g:"A53J]fZ"#2\L'r<<7fS%KbV&0/P>_;Fq2r_R\/%)hCF%+BpfIqfAG+mY2Q5KhKTXJ8As#D#*?1i2UB<fL6<P'APWj9MJuGi.c9f#,(b(gbSApEA5&B1sN.A>'7_MRfX1iK@*PK'mP=-c_k8t%*k4RWE7CY>fq(e%2+B%g35#(hc/6iJ&DY+kLJ^):YoVNT]")T?J*Cs'`@pR_'"f*`X_*$u>s<@%/^qi7DDnugn-<<>4#ZiZg3R4.%_h7Wf*AN;R>?fKlW7mGT3]@q1L/Uf$X0J(O.0=QE(VZAd`hs3`DfX6_-Pe0r)CofRhXbA9Y"Cqinn]=u0^73]d"YfD_p8fcr6dK5%i_7JU<9`H%ZA)[B.^I0)rjj)ao\b]C&W-50%Yo&6"fg@m"7Z6QX?P^[c`u`dVkiM4DG*[%16X+CfTA&Ve'545cUBqk8fHG6I<pDX%]98^jpk&Zulh]Qpd7cQ(nj(1]6;R-pEV:h&@N6%sg8:KT9tC6gV<<Z"I0'=,4a:`=iFL_\BTO4=WKI3%>pICJ+l,N/Dt2#<Z-E"F%L<QHbLX-[E1;(I!4AF6FGeHX)m(+W1L0L`D=6Y@@->P9`o3Rna,>T\7RF&PTf&W+`"]".7A5i9Y&oAA+UN!DlNStU\bm_`>*\rU4%0gAB;]S)+(@R!HL@n&OsI@M\-%Ds,)^H!>fNnc+t0ALl2-`0&e`#>V.Sc6`@KNO^B%&(icHg)a'!bCmAEIZ`&oKu$hM#mUMQ&*P"%_ipn22W6C#/*l5p_POE+Ym%fLi(N%FVi1CMe?ehReUIk8]"08lgZVTI&;p<83lmHh?e]cfKli2!a(CrL&C"7jN1`tX9%o,-)R::I%4Un+[i.G[F(TrTeO*%c5%sMlMAhSk=bBBc$2c&*^077E84')H=mO_n-7Pcr(3];p&rNmf9iVr/n1WRW!J3e\8UfW'J)C:<b!BdIg%J=7[)fEh4jpUlr*]#0XK:A]?bpV,6cU7$J<V?bDp>6`!((J/!.juQVnhqfWYWFRSDBFo+P\#7SLV,)F*RN7uepV-WTVLr&V8^D7J%RSCQ*4"91>k6qkJqI)9>Yb6Msd20R4hPXED!faZ\.8_[$9%gS^?fGe++>bbKJG\]WEG^]CYW!VsW%W\?_bF1$BGT:s2JO1q("$I+%Lg+&hkc+Y?Vj_'pqTO@p5BOSD`mREO1%+0li:>tbRg.;LZ!!8in9L4!l]`,?G/4GjEag8*c;=o+,,S;DS4ds]-mpa9elhboCDrEW%$08C;mkS64?h+;%-\lVH&)p`U@:i8oI._L!>'=FXOpVo]Ne/%DOm,4>N<?#G(]\;3F)!\W0`H%[VOm;7]@r`:W9).P>2S%=`bt)H%V-"?Mj/%u4T4h:%<a]@1_/uu12jP@6f2C*NGNU%JV9-4Y=3aatQ5m?!2:oog2XS2%=eiMD]1TiT$XhL(A2@r'5O#LU>F`NLT_Xn5%".FDIbUgk;[Qd?Hdh\3^Nc$L8(FACQK3?2`?+I6F]Dj$O+,l0:[3n>iB.]0hCMAOh:4-HVe;1ScRFZ5(@DW%qdSnVcN=R8Cd(mDl%]:Mk]EMMtWlg5+;HLl[r]TVt]cD%E\!J%J%:)/o7jOc:6ZBmT$,dQh3FUKOn$1K5b@uV\gH,^PDCTfkF``"#%-ItBa_o!EtcN>iO%E.Jl,Mquj-PN\Na82OY1.H+tpnIiU\V];AO9++jQZ6>(]cT@!']]iQ^jVe4_#&[,oF>%1_\L#g&kM9^NR[X*=K:rV=52RX@#0fR@%b&e!8V93e&'h+!?1kOZA:^jb";R,>skirVBIasUn$\'Ls.84_7E^+u3ZKiDmNUUj>!2SPd,i;bad[p,YmHM3_F$Ij`-C7tIpbT&#%08GmINNQ=\n5(7?oe,7I_+0i1KXiFK1c9/A96:j&5ZE%>9cd_&."<gUBu54*Y-SiWY)?!e/V^nEPl&#XY9?/6^<O>)L<hk:@Ok>s%c+2g'<1FH9f1Q`53-m3N>]-bUE.=EU'!-Kd,<"0s5iLUO`*2iYTu#,jSK&4OX4:"KZR+\&`#.Ks\4$(tKHDsn[Hs"\])Im0$Xiel%"@H3@@,pejX-KVS&rV):,^Gk]&KY"KEu*hmXDioRX&;@Ad*s?B,<Wq'd,\jQ>43ZD5+9t61,%)q5e4lbXTOa!imo#LUFW>*RR9[m%,ZH)&*+<\u4Er%2*XK@'FaH*IGKU@aEfQ#^c[q*I)*e\>V.q%uL-/+p3lG5qDN&^F!&[ig/"ZYM%;t\)ci&1RB1XpaV.hi*`1%mt%+1T6!,FFi"?TBZM?Rg8nXN'6"?4>g.=Eo2i"c-F3j*4dP1JAD,*LA106A$De-ma:2&42eg7DVI"34I&<])b3q[gQX^WPh:HTLA4s%7G@=<On_1pXBbB.ZToJN[I,^"*&OCJ[u@1p\keWa<-li6D*[WHn&sC;2t"=Mk=nl\U3,"SY!'`FIIqZr&\k^M[HXDck?UaS5[Fa1%e!1H!EUni+:3MD,gla+-\1TJ;B<rVbB#J1UG\Ff;C'F4(Zm/@iq97G/eV2aECrrMO?=mA:nr_qH#b+ijNPP@^KZu"F7c;La-6rt4%r\9C,F)@"<'Z\l8$Bi2Z0Bb`!b(07W3ZQMbkHc_'ib5(N_TXMkXh"QGCpiV&AhPs$Nb)hafUZ.oc)Y5RIfIY+?@pT"2:HLW[>-#*%be0csXPGMr_sUK$;52]lFYDd[)uWlp$5I1h@QL?@G&rTYODFS0Ppj%Y07`n$hc=8dkli+j-S(;V!<ausqq4quElZ;7+Io0Wi72p-%OiEaA>o1#edBajuY7tB0.KHU+8h*42bp>s=n6qS0X:kG-d:G7RF:2P\C60VV_Nu=r++Wn2(%SSc;m7slE<:F,oE2d>Uc?BbY*ZAh%#+m-6re*\4>qL)OCR8?brUFjk:7I_e8"(au6SSA?!Z>e7qQE0(,.&kLUC$Ju@_6SC6qhY<T$0,&"9-,7fE7q%c9iB^>gF1lELIs)%GX@[=N9_dK`54/]f`AW#1'j`a6JZ$u#6]C>bU5RF,_F`fQt<T#j8aApiAhJYQgDm#:!];]8-mmodt/g`]J^1smBD>WTojg.=f%I:%rRm94qNXThelQ,N@pNjAW!S$nY1$P>gJLS'.oqc%eHVUf*]tgjY)$]_JFe,8`oftSRd7""M'p[bTm8<nPFB-Z,8[+CVDir[E81`5%d_TbnH&sam'A!Cqi,dKs?HuijKL)if\&BVZ/NYKU`rtb^bn^$W);CIE"M/7qkjNh1$FMg2k<'l[fREc.P$)Om7!llT!SX"^lZ&Qt%f9a@#ILpC]aNYc7nNa0hc6SMj4f!V"q^O8Rh6(DdG>B!J8b?l:<>C6,\8q[XYgGF+"M1o_TBZM=BEGRYhPCGeNL-PUUe!:4i?<EU%XR'Ia7BGfWe1Rm8!30bX7ijg@Gd=7t\FP^#6o.h[U`K-B4W_0Q'.]-OOupCBC<5"F'E4p/6cMSqk)#ap[&d^RU&N)DkLF:1Wt5:!%A(0iTkdr4"WJ$R/$<Clr0BlAk$E%4M8Il(SI+<>4B>"NDR]$c*#iKR!i@&IHRCGg-BS:$mRB@2@Jj9!_8ftV_L5AU5Bm<hmA2oA8%&82t7)VL.r:sX<"#o8i+]@)<RlGnF)5qOW8j["A6Dj'a">IiYrIX;HW2nV6C?(0c[4ZH5B>LJ/"4bV->J;2F$jsk/\X0Edn6Mnq2%AS\)`ePGoe6/)`%^s?NmDSja)1,c:?HIa,T8'V_Gr3GMf(Hhs"b@uK-p7LA`8Mgk"O^"0WCE1&_eCN?)3&rfdPY+"V'msrFY\U9G%g!F@nA"\afLZ2g@(Gg<bV1PQVXQa)uEMciejk;:<bdJ4^#jm=A:r?*6N$13fD9@Se5N*U$>D&CjAF`D6*=?(TF&.6@n6u]Bri*+C%UC)qj&4nGES9<X5Y/>+i-jUTU(c8(I9F]:Kq&DDCm]htCk&.ErH5,6Oo_Y0*3Vr:(kV5@),u.MSok++r*-ho:F+W>XCe=CD_l7mZ%rC6S:DE"/#-E&MYF*YfE8[$fkT:"amDntgKAp]J-=J?D">Nch\?NcbOcc7mlM%ufi`2D(91#TsZO1Mhq?L'&48oL?UR`fXW,Z2fe%C`L3KcE7d=cI-:$C\7JaR^@Si0Jh&p-C3d"Ots5aV@lZlnAjD-VJ?p5'GSP&VsMYj:n$le;_;N7?-W\2H[/.HJr%9j`Q_OR7k7%0%Rp9^*7UEO3.#1P'ESp/>#C)%cPHe;="*&8irn(kSjE%tV_6RkAq>t;TC;p&t&]2m#]CijoDaeD)?l-n(Kd7T'"-FWAnmoO/LYLTX%9Gi8^N?mT(#MiHIV$A?f@`YF05mn+OY!?6YTJP6DK1X;6?@8=cl5oEPDS]YVk;-HlOD&X>+g>DQ`mm]u.lXrQQKIR"VB9iKq?U9H%"U@<!*\R4!X*8nJ!9;A0+L\q28J`Uh=6@'II7b$=;obombC$l7j-!'n#XUsgh@$+dU'+;[Iu4#.Jr(u-Rg$".SK_I`ZjoFI9JbW<%eq`S&pr\@Xi+fV-YTO['j+No0U_EE8-(X913Y<ehTTR8/X9)a\>\ABMG[OIj&B8n>'pV'-A%\)t&3as>@XpR3V2LcC+p5f25Hi4R%&\[^F'&M96S2HRP5uHdO6W:s50CVD*nBE);GsO2KllJq7O]VSlWT4Ud<nT@jARc)R+W,R;:k8(s1J+J6b@b[dG'snn"[kf$MV..s%',(osZnI)36C<P@:GfYh5rMH38]2@[P9N[h,m\GMhA6W$]c.9j8B+&8)t[td-CRYW>Jt't=7Ql>?=DE!RDWhQLe@TQSF*Pl_(&>d%NEY[U3%.$c+()h<q&'b<\)^Sod;4aBSNI_(oK8/?cdYrKe$URa,62(mf"VAj'gQ*91T"jHFnKDJ`-QjLc?;p\L+"Si9QU%emb!$u%Ze#BI@(#C9Kp%s3`o%f,4iln/Vnu818C!n/)d0Z`HSJiU%J(I_ALL(],bZ@"6O8eXSX9IXP&t6UjQgS5ShBZ=flYVPb!Oo;`*:If%Q;*GX-T%+tCFEj3OGe04MM0CPea%Hc"e%]sVC>q[HY%/1>sEcUo@O%M3k]@02aPE[[lA#SW0Vd?3GHUq''f4<c-Y!^GFj5.G"k4e%+*/ro?`n.^dm9%R+(1CB!d8meo<BT"P3n>@k8G%@37Ei*+*t@R\:ANs]\MYK)jh-HQLG`N<"No5S;BLk@JLW?od2T1b`Pghno;Dt%obrctmO0XEO/;DDPdGt.)/]<BgAMGuk#/g]AR685-qN-*2E3GA!cif^)cWLt'(PeScsTnNk?@_VDjFkDQbpaV$fUH+.TZ9Gcq;22%EF7@rV.j,eUrTm^!4@0'o0l0e,Rl0M1\0OP6PpAoVdABnOV(&f21mcLaRjnr]d;CsU$$+ujHkjaWd/uUWpqNJp\BBl6nDM*2i8=<%MgRQ1@eS8u"T<ea@"\j>,Oe*F]&YhfI*LI@](Zh#;S3N6e2=V;L178hOLURE=c5:AjJ)@u;aJF?GfUF3dB7hSf7@g-o=8JR;HfA;%3@`nfIm(+bl6I,8hZ.q)e3l<+[F$768"7'd5k?="VogZs56+.!eRdql8,4HP(]h`o':UioYY3kJXmZD8G@Oj\UA@,IQ.<]SD%'J(%N%kDkO!ER5I9:lc\uqj$?6..Ik(.:826jMBpZZK:H8"*`Y;AjX-SBd<%l<nSrQSK;cbqcBd=Cc.V(pGgCI'qBAETVBSJ$#DqG@L1%AhoIHQ7Qm_TS<I+@q7OV/UQ`tr$=oR'3&FK&e!EnTBB*!S*k<ND94EAnSkJM!^X0KDS#bEmi"T^Q)miZcfqe3>bG9AGSg.5X5keS%^uq=Jl5j56`c]?g&Cn>I6G]+kA\reuV?6Zg]SuQjR6WpMWjuBgk36d7eC9l`D5)<r.0D:(p:JlEJ/ba)Yb//'m>.GB2r3Y:=b__K%Hrn*e'L?QgoCb:<?bGP5j6F[5rlOcNKT?[:m8T61#p`?\f9h[da'Nad*oFUan1Ar'%s=@94]uT/1tQo$praW_qp;?5^$Z-p-O;kU%VIC!dfK/g8ZuS'c^W"F![67ndWiN:C.h*BDp93TR]N[mN:D`1]q>L<3U?&G:<XY$aX#6FF>!.$B+N6:o4Q]c$K@KG2_9J`lB@q<G%B'Z$_BMo3CM<UC<=@[<&l%6lg0nnjo%6s_A3[b2p--1o=SL=7@c\:%ej[+,2^Un"Y,^Xk@Q[&8/eY];4`t\q6WU7n`G-lPCo!1uY%`d[CFK#*4]:s7CR>9jY2^V[_al#TB]rfcR8W8bcP't6q:Hq/3SV)@OdnQTM*XqPeY.s>]E`4FombB%qLE\AM>0<_kj@<\fp-I[TT%D@E8S#R8Mo?$,lV33Bc1UbTLQ&WPU\XK1t3CNOs'0ji`A27=(t*k_t%)XBN8d+BhWBoO.4\.E<6cGY;.C/X20&*%+K?uYA8-WYYP%\s!/=!!N1_qb-fZQJur,ePdaN_,DgH9h-GaKPbm4N0f,i1m#Ig40mALVj3qtmud6jp9'gC,U,D$P426ZB,/14Pt)WgXOU6?rl+2F%]kHt:e7K]._uoP^lL680?@,@b'MFL^_>M:<`W-k#P;2G[7^_K?-4VC:aLPckr%n,9,E]_!0"mojRA&k!e"Rr+5RDFV)E\>9`NG,:%"$-=^4+;$%JJZ]_*(k?BAbmieM*'MS^t]jQBacMtEBlZd]ePcSq@"eGe/:,E@+Tou?G(3B)'TCZflpee".Ii(?0D.n.%lq5m%riq%dC&CWdQju\`b6dn:m;#r%JMuO1-iMq*3rhf4;DR84a4A+(9pgaJSMN>hhAg_^6/PTA=MuY$7Ohj(p$N2Y;Hq!3M8#r:3V14%5_^Y%)[frlXV=UIQcE1O-\/<:N>l,FLKUq/!<j\#c)c!ZNdc!`Y96[52GY>(Sk(/="[G589"uZEc^.d;TO+q(A`\GOoWpj@OohZ3K6OXb%hpgk2F'pqX15RBf*72?RHFT`GJR3(cN6uR:3M93gf"f`*(K><2`?(VHJ6FVDFZE-D3o/QghCf$H=r>TA"-P6Aeg(R'bt`k:cW0gF%$7M(6LnZFs6`#\'31qc"(9X5j*6DLPm\RI?eOK1@B<)&`qI^a4).ThU+RblWZi[8UF'u\"j$oT[2=ifQXoZ4s,3;/<%=q]k0[5[9%r17HC,6\c1:Bic`'O&[;YT2"T-1foW"8[sUa_F0]BZYL+E]>In""8]:JSeBAIOSM^T]M]AjH0K>i'EfcL04`ES8FL3%t9dM'%[o9%'!aclpm#nG#IK#gSrM,,TE#<0[N%-49U`#L,ga!5AWR)L:7/mZ3M6LqDi4V=09,9t!IrYl/1*r]:L.g+(?d_G)N,P"+VZ!a@gmX3%:3`Rc<it)D"djL*TJ,_;P:TPth6Y)BH"74d0/XZ:cITuHW-(aIWiij3)n>58TV8hhRl!X5/HP&pB]4IKI\-`>f'uOL%Ogi?VYh?`%br'9m@P\RoD-Kr.:48D+e,doUZ\`DYC5)_jjMA,Vl\6k<,8VA,Bj=GMW46^dY)uE?-4>Ac[LJp:A&M+@3rh*!kC<Ue[PEOKVnL=W%NM.Zq##K0Cf]:;04*FOTMh/IlWQ(34HOqU2Kk\a/W7&H;VCsM$Cf.N1@%,AC(LFL-fm'N:"UbG.Vs[m-^3[BP`N7Gm7EW=R9Ws#5%I>VPfqmOJm`cTtPPiMRp`UhZHJM5WESK1N'00T-/'b*0.EaS+BkJADBZoT;Db!0aMK#-!d/W(^2;'malG-aqDAY7DPc*_M*\N:+e%gq*$j/Y51E.N6_RVWRGFgD@8U*D_*EVA7&qT'&UXq5<uD#HRdOVm354HFchUB9VLZrpAn-1G8P=3;7)clD[$'eC1^5no%#<K,aWa%ae6[!s7@f+VKPcEXhKM+Z;3iB):ajtW\IUShSmqR]gX[#73t!$4R[1A5)fqA:Y)/`2DQt"B'RPbe0&9nd@'fN#4,9".Ms8/SeS>6%MQp`9OH26I@l0Hm(>EOD?>QEIej_H'f,3Z..T_Ni=^rq.qj?cSZ8^-]cFEFSU'+T],U-MM@&#U^/:+D3B)?8Db8@53q:H);3?h.l%3k#^n?(>l2($7N#icr[M#u$=$$bi0!2Zgs6E%(r)=S*.S$^AhUA:XMu.Qu!tSlT7NJDNH3!X5:bbUj>>juI4?]FG]h3l;-J*%;)<%WA0<^H5[T/o%(H+&^\8.TN_F#R0AQLQXJWb5eSBZrKGYp4m",;T\:sZ=Gt5N_/dr<$rE#rK'<5'#3]>_(+?seS%J13ilX^i1-e-=%!+H:/%VU7oP`P[l#^fWeaTI5O`O[I'^o+X&Q!FZ^/.q%lpLRO>;i$#HOV^Y=Z+HQ7/\,8)AM7F'ahtm"?+D_2e6/&JU;>W%b%6MT%"\9F'B#-!4bAd,/n3?nJb&0d&e+IL$8DuG=='oYT+KF%09iB1M56c(lL38+W#C43@!Ur$*nC+&n@fEoL!It]4"TY:ee-rZPP=Ae^%HNHYI.=1[`eXu'Le8G[+1Y7PpV?E??J]?UB7Vd-0DTGE4#Z'dF+5N)@(9,Fr^u-Aq@Md&^P(9]8[0I1%RaDLmC_]QW:hrG@1-:8e%6Z"c\%K:Va@Xb$5,)iTQ,'qIt.IAInn-?R"YHmF&r.'9J(qMB;V=Fs\C&Hn]IJbm9V>(;+^W&R<T5ARC,CppF?4Z%f:a(t\+G.Af%X[@mj0+;f0#W$AelV*GF;eY<Ma[slcV*@qb_@?a<ZU&dI`RZKqTg)%gO?q$oOQ:TsCW#dT*i#$De!!q&SqZScnNW*SG;ac,JBIts%&J/utjtQ9jff&4Q0Uj\NhVK5HB5Rj\]jb3o:3&OKe&pj4lY2qA8K2P=XlSef&uaKk;Q+GHjW;o\U$Ki2e9Duh)`SjA%:n9uhUuL6%*SZ9JY%/*R0-T\Ma0^6s+gL-1N"A\G`,`Rk__jG5^cutX^MF;REs<MTg:P6/ZU'nBQf`'"l[Cm/'#Z+pE@t)NM`T:W-1?IT)4*!u%V:*P2[\7o42J6=I]BlE<Qd\"G?C0&^c$/KEPL,#"g`O?:E\eqU@Ne8t(hcFOT:pS&Tq^iHQ>C*@CuCI0h"*LWZT$13O`fJl8V+jf%'pgJ7c4OWIXCACK`HJJ=Ntg2JP1pe,XdL4o:6m_#TQrbW>*?'ll%!.Z/BUG@CL1fs@!=[Z"oRI#K>BduV;)]6+q[',N1P'ZG']W[%(9uU/k/ASNKkodtAUHKV772Y-SZK#res?SKO7V<)[l^8;)tSuVO+[:Qno&rrMC2HJrb96riWC5SHi82%cJ@MY*RkttR1r"QO(,9<%UmV$h'GK9-+DA4N`-%G;qF3$B4"F/WM2kl`gV0KFO:#[_lkg\j-k<JX[;qXAcbr&BQ#,gH^dOT[O-Ps7j=RG4#^,'=$lbt(NlQ<A%#Jm[jNP\Yg/rNA8O!Z@qaBF0#UPlfQOVl.\`SDAe<,;kqZ4U<TCEOfq($>;bjG'%fbt5FD4BK*p+=](R'I;KaZ-5c&0kO&,5fFgC%U<u.Z6WU0;nhH)6=T_L`[31rD9;g>K"kb"@^u^DuPP+HDq69dYA.?=0hcFIk5ch31/P?r]R2G(C2&SR_5Bj3ZXRLW5&CCO#7sdDi%VUWc,nc`o/n"'61=$psE+p6l[m/ckgR@G8<5.`9p/i&@Z'?d.9(fUj!V+AS%K`NUsg:UMr/M\7pm_/tPk51@L4k1j]68C!mX8"bk%$1<_5ksBPM.fCM^7<,XZ.pWG5.`k:cr^h)mJq"kW*n(J(26E)nE(CFKdk1#>D_,n]&9kK@?V`-.Ki%9`]b/(Q=6XnZI>Zh@Y(F6G%9#$-8K95>(5n.@K]`uJ1J3#bA2H$D[XjXEp8isLLkue<j9H6ap"X"IN]43d#h&_!t03#:+N]F)PDK)_P(^jUg("@)s,2mCg66FgG%=c)a$9''=3,D2]R;'f?3P4R,Emk$!^/qc,gSt#gXl/aFcJ5)L*BsdUO!'h<l9!<b!qd\=-QD9Y-A=\lc(/@o4YMZkPn*SUcQ"%FZ%7bIQ4M%J2hi>r!FDVM)=gVL$ZN"UP9:iD&Y7G&.*jP.[9-Rgs`#%r2kE-ehgCsE`tpS-(dmRNrT9(fJlgV`dWiL(%UQYjLHgbWu$%k7]mL3?FDG;9nY!.#YuW?IMBV$1BltCX,DC$K<7.pO\qZTAsg^N4n5:I?&8fN_bt*NN!U@-28Yo5^-D=(:A#,^c`!^[Zn$!+pk1e%S$R@O/Xka:F_Y\h`VV5*kc-aHl1^Yj,o-qPW+eF8.G`j.`1jAU+7SY2//mkdgS.9]f\V&e[V3iTBqq;]>;Y!U_P/XJQK"m1ld\+X%F=aZAY[&,'5B437NCubj1U3smR'#*DrG>3D"K]Ht=1Prr8(-V?.K[E44dJt0j9"[_F1P=_IXf,#Kq5c>R[M-0>:F^?4?gn84pmRc%,t&QAdEd,1CV(CJ_L;u"![1R!iVHE9;XYWcoYMj#%.C?\I'^/s$<bsQojaKJnF:AM)hNDAB@YEJ+1,P'O(Nbg?q,%sHSReHhJiL0%$C,XMLhXKi<M,P+\SZgcHk3_6i<p1j@^)J1n\%gR#5\-\HnXo!i<sk4Ki?@EH@.C/$ftuG`+mq*i!jo-_Y#q'(UIDa)r<&MN[3ou%=-6C9hVep_l`_)A!k5C1QX?4R'TYp]b`tN;<@h#JBNIBl>j40E35T"h#+^_f.&=LnMlR2XZa"lmr=H;`]:n.%'K[_Rm*LW!hW64E%adNlB#02bPo`6T7\@`F_C.H@V5LeJ193l/I/TFUubib4;@7htOL_QStNO<PK=jgl)'EP\.Mm"SO$Hq6QY-nM)]l3U6Ea1?+<;rBp%8XE:R:L7uQ6BPE)#^PZ6[.osQ9I@].lNrXn2:sdCOIiW-(m:sgE9gs+WY_kKJm(E/Pl9$u`S,2is57>D:Z#eh%@'-FA<Z*`r>b'L%A.RMa*HW6u2nXJJh<l;*r!`&7pX&<a6-&Arr.I4T]6DW(mhU<N*kL/hkZ%E)fgE5q#MmsK_0>=@gV&4L=NaLn6aqCIh=ba&p[+[/%]n:3>'u:.Kd-][U[m$!(>eOVXh;7tMO7/ds=HL2_Y8;!4/W%PbJ(cE5lf<7th:Zig6X'4nHO$qq;JPrT,2J]5pWmAN&O^C=k&V<U%8lU-2dn(mq9lG@TFk/.EE/Nl/fY,RHP>3lSic&P`\te.h=p.<iC_L,b\j"1/&UE*>%ZAAGs.5?Y46Mjfa4HR(>Eu5kLqYShWPs;O%1F%d6^8H"Z;dU$f1aa(t98`&dC0T&/@<7XVTiJkjb_BhsfNkP";=pDbUNCBK[ARgL:qKZ1Q"U\C.fDYk60'r9m@!`N.GX9uY@=T+%dL/"GICN7!B:J:Iq3;U_I_oN;)BpKLC&%ok$?DU.-!1p+JmAa.YjB)o>`j<QDBun.'bY(l0/k/Q>>/%D2jnhpDnCTH7>8'JF9.3*%@psnN_V+c2RR^>j?eXR\JGu'X!ap/_BsGXh"V9>m-4tFCEd-t9^@e6/hJ$0(I=/joqd6#[RM9R4>@6X)Ym12Xc%U+-3nY[Y=LZ+2%fmS86(!KrR1[O'BXC1JOo<)1[qmkO0@eeUHJBi>1JfrO-eG<_.g$VcM%N-)T.A')7SNCEnV:^g-OM`NU@F5QPEhi-I7c1^5]kb5m%P./bm"ch#W`C<:#ZDDaRXd!+gMg`5!2EHqe(Lps<B8MGVW843'T0:acH2Dci4tHKtA1t\ZfiuZIlme^k2s2mV;gl1d[T=(-i3_jZ%YWWqA3"?79Hua8Em+<]"*n!Sp(u4&X?ha;Y6W"3"A!Ub;Qe[&a-9!;,beoK@maH68_DkG&Y4K':7?K\+=KTW+niM9n`>L0thR!/o%ch=kkX0WO+/l/)qA`Wgc@I_t`X5?ke;*9#``YT>&r;->L/=fnDnKW-Zm2T'h%kI+]DeGS4J'ahuX2liIZrZE+#'Ea2B#fukcW']?%SJ5(7A?r$(MN%EV3-MH+A;UUlA<nT<9CDW(I^EoG.>fm=GAPS;o)L?[PgqB#CsTWtTuM;N[`U*J`=H$\i&3F6_S]gF.2C`COkJBL%$Fc^WZm*ETc<IKnaIR=[O"fFC2Wq%2Ef44\]=6rCZoJBN&ur4+qbUc]qE:lnPQ]/PQIC80:LZo[8d<\3/%M`m<r2<r@7uY$\i+ta%)k,QF4g(NX:dRP$)F[:8[cLH#EZ"@PnRCE^qs(U*bt:GAHhZ&2\orK`97hgo["W&Z=q!q@^EQ6M\89tH0ot&@IpSbQ\MC#YiV&en%pIY8@ppm3F*H@^b+7=(cHd@.#W>2FP-emhPL\o."<TX,:G3qj!]_ue'j84e+i4Ja$X]nH/c9Af]DL&7:_Q=aFgCG[<#6'h\_ej&G%H^FB<@mAcJSb7l;F])H,'u+t-fE]tqDT%i[o@[cYM7cufd3$d7(8Wj:hmK<tQm(cW_hj@Zi0TBdGcV)#cgDfU.cpVV@#t71It@PH%SBBT5(+H`'DG:Er:=D7O`Uho%>7JE^FX<8U7A*<`%p@@(Hf?m;Ie4LNPI[h=Pg<7FQIO@D6_eWlmrtYVC]!mW(Unft%:Ln/9),"E%Q1*mtNKA0B\R7WD4mIXbAUb^i=_Q-*-9(<AG7qlT]!P>o878sHX1TgEhDfRYG":iXgSaC/7C@IP;,P%P("I3aN??f8MJ>:HPL*Ss%;DBc+@+3BgE2!5%4&Xh*Zm3!W8NTi)T<]]L/ThK/.-"71Ir1`b)ok4I/Qe*:A@/b6@m^\ONe)q3Z#4_H0Vtge5BeUtO%Wg!Mga/W%\9FGHrJn"!bO8M)G4o'CiOHJ\rp9T9>N$k!b"pn%-WO1Ar2jqNY?VSIpMYaa()X1a&XM3VIFsDG0IGXt,.uE>^cQ^r^%4KH.DC>X%53]ruE;(85`pco9R$>LlBJ)l--&0nIHd2bW4XO:<)uXZPdlYc6^`eO[@XU\`+_snUg'bY5-Rm=B#PbM$\sT225/$AtCoulZ`h%-6%C[B#J#(Fi["g@>N[aAk(reYEl4idS8n(SeV\<22(J\Qh_(bitiQIJf*5^8]01'n(M_BV=]GR4Bi_W.6"s4kqLlW5C?e2'8J)3<I)%*:KK\fKZF5;Fr@'8l_n[O.<b,G8(!!V.M^D%d/Z\K&]YQ4re.90*V)t<%B'5<SN@,WfQGOTg.u3r6Z2,d_u[HVaT1>S_(&oT$XDt%G3o5*[uVm?]02Sq@JB<UotR@mf_t-6HP7>]TtZ#b26"uih$CX?BWN`YMFL*fh2_HESV?':!8*"?O70G=*K@;(=!(1RPSj>Sj9WB_%HDl:]cm\);]=Xi1:5V-&)I`BFT%rOh1Oo=k)]d8F[sb:PF&G39_6c[e-RUfElfI1*$V)Q;ouNsWlb@O2FZZD]q561`X.,/VmS#1P%CHn)3qKZ^tcPkWE^RnhZE-ooOp<P_eg37iTFS,Il&QLYniLCg9dd[+ra]Xf'>].U=;X8)%4a0;TYO;)Ms7h%+.?E#MPLiGGpRh)9%p#%iXXsSqtFB.6^IBF&(P?aaR>MLMF:aW^\4aH,^CPBA]]8P`lIi.684$E,Te`57?4n%-V-'=\\4Pac41PZC1gG>VIGlRX<PEDq`%HEMhP8_P#l8)?2RB5j];FhO="1QP.h7rs$J(:CjYN2@Pj&9d5jm4`%tFFE>&FL!m9BY$B[=!ngIJOIu[R@JV1Sm3t<Y0R,Ze44NK%BY(o[\k-hrlp$qVG,t9[d<%NOWPr0Ll&2G)Mkup2UUZq0]"WM0Z!&5[1gT"L\[toa6o82cXB(;Rh7YEV:"L1S2^r?Ls3Yra<*d4&%G0nWYIA<:XqZdj1f,%(=G+5^T1gOH>*D;b%NMc"\5@,uJ)GR\rVK>)NFF@.`]]%[j1gOHgHfl*72k'0M34>_[3"O('(JQi>@g<uJ%f,%(=F,\Ynd<'eWETt96l2"lRQM+#43,^Y0jHu'^N2Gp!r@1RG#8BnAa/cNO'M[1<6ELH=@*s'PSgtV9VOMVtIXogfIB.b\)ak@(%;NPGP)PNrSG<IGKPE.@$h#lT;3M12XGY4^AGE9rkE$bcQ>oO6Ch*\g,8%uPuKkHitZ+k[/'=<Z\o@;+.Viqcc.diI3iR?Y@7ILp-%cX6M/j.A-^.J=m`'a9#(g@$mP]-PY,R#B%MBgh?b!UN*MOt];Rbfb8bP(rYu1J4$4A9La:hgHD+&L")fYPZJqb[?@*\VhGsT'1&5%Q+T'#h&^i2-F&'G1j9V=AT\[Bm5*r\0B)m,-dS"=DMipa:3<s1R$+8U>M,Z0;jt=pRG:US9lnq__SpG>'AY8,llfQi&#4<#I8#C%%5>O1hbo(/&0&CMY#_!do\U3eaI[K=#4AXR0Vt_ac&P1O(]_CN'9k1n#mkali@<A8gI/?T62bO;?*`6W99QW@dbDD1#IY8TaO^W%/%GbXBI:6$<Y-!/gcoNokPd31Vk_Q'*K48mIM!I@+1AI%<+F_>>VDlDo/*m^J'OrJFraN)hbK6oO;RUc$__Y$luk@bB?3Fb3bp.<M"%T#B/^ZBNPkfnHF11J,b-")CuYpUpgH*8mlJ<8!6#-;--_SGY.;0Iun#/h9$Do(%I*.8N]YOIR61cp#ER[R032l.:9gRJq+%3q?&5%rZY9SHeY=AH[4Fh/"7uqltdOJ5JEQP`]A1lU="1GpDs&hLH70CX7Q<V>jcVa#Ok=cf/%%^6_AQ-f@-?sCEJ*9V_=Y]blP(N.)R+L%E87VuOa*AapGfq3\.&,SE&V!Kje<X\7Ut=f=ugY:\D+2F5$s&VWKE8=?\Y+T&6jPop$<Dh1i&u$`Su_pVS($oE:F?\]b4qs%+_at%\D,')k(nJt42^(qHc`PM%PG!Z2cau\lXg*I[D,F#<R7-"q=hW?H(V*mHsAmd^fmb7c^H_hc^!!9[fpis2D4YR*`u(C9RR^p^A)lI%bF<kk*F3I!;e<s&VIq!jQQ]dagU3>JAlsf;X2bkeXj7WueD8*hSso3&oGN7JSp_FrQ[M(\a-H%?CgWY$i;W)\9P3RHG0;MYgqfL2%BdA16TAs0:6#\uS.u5X_16nfW+4;f;8LO1r#7oEV@pDMG3o634(c17o>`A!d^'N><ZC!Sjou_nGe"(*/)k/f>P@Iif]f,TW1f\qd%MCSK[K4[#o%eHnX_KFb(nn(Vj3;)qKA>D;KFH7jpocR^KZbd4Hg>U(Y+-NQm,#IOFko\2"%am^Hhn:7IT"Y'`aQ[%a48a1J`qKB#%bZ5YnhDB64q<m(.P.5%.b)oVY(-I*-eE#\/rm!u5o!=hJmc<n^n&p]nPDAPTMrT$=PUH!=B\Mq(1<r$gT@dh"rJJ5CfBCY?,eD_f%kFPBT_g=G@d2PUBj@4(Cq!bMl>`FKs*W+T>rd@[Xg6?hAs7<)!7AF^5)KC_2*7)=35:I#erd"@gDl;Jg$Gr8Pq+'e"<HWJidFc2]%2^\bK\mm7/2L^'/WR9mWNH/Pm1UoL#f@Lj-qWdrf',s+*q_<;E&pqrDUI><0\$*89N/T6PjuPHI5G\q8cS&oZ\$Y_Rh`eJ398uG[%Is5FXEZ[J0Ha?W&:Lkf5WL[bfdar,,NGP07N_d.Qp?ZrI)%B'BeN5.%7dboKCo7YO0mc-_bL#>6TCQ^(hCN9FB)1.:@naJtP$=O"%ThTU=<__(cq7Z;3HT7D<C.TU5h<B&Ilh,q$b,:GMk&-PH.W%B$W[RsVCO8LHbqYj9SXJ?L=abW.i\nVaF,'[:@]YBa_>I!q-`Q.r%1%Jf.Hq^^RC;'98BsiQYI_TgfLp22MAp5e=$<ro/^rH<Ab\6pt5&@ITjt^gKci*M.g;2QK96BRK):#=1FD^;I2Da(-*hIYlLg;Om%8A4`oeQFMKpWTSfDcn]gj_ReEqg*q(]2oVT%dM/*<7Q;/p"3\b:!)4'TH&G3meVa_FRO)>9G6L`d0H9Sk_sof?sZuH4$Q("-@="^%B*c$(pCr(E?#BkA?2(pID;9^#jc-uU(ImchZUVG"a]Wq&H6]/'4s%+4mQZeLr;El(_N-#nDrj'<fnMF33q:\<mjDse1MGfSU,qjo%O&3WkJUkf8No-HhP]M&0(oh6gT.-"G6D2U4P@6;"qo2euZgg@*MQHo%Edk9=.XO-<J+n=1gFJS&/ro==F#d#DUI70\NbqRV&XUZ;%(TD5VIQ/JXE7VoXYEsZ-!R;Sc37FoHPH(!1UL'E3H!aF!o@]?%)[4m&[mpj72Zrri;1Q!m!%tB)&d:71%,fQ#;1Q"DPBZ)97fgmR%"#tTrShCFiMR#53p2,*i@&.DI=#2,`)pJHRAWlV,BC[*@>Ph1<f/Zu]Z(uc\<k&6-b-tHDpOc&[a"Of,rR=!!*dCSsM,q+g:!2',%1NMDFq$n["jdo'>7c#)V7ar..=fC$FD5`0[qG#<$G6!b1#PL(*hKf'3IiE-b]RID,#OjY$`4UQJX[8e/np^3,:!`+6YIC3Oo(l'>%QVE@@S2[Y/oW3MJbiG0s(8kd;l[>UT+*mf#NT<,+DoER8F[1LKPHt&0QbRQ]?GAMeQ4)dHl]1e"fbrqtlSlS6l@/=#on=XYm0bjk%?GF0co"jD[S%d9%m;]NlCL4anU='MoY@!1ElHe`SC?OJm?GH=!fREDfon=V37*L!:YM\tUp<L^fBI_c$O7+4^qFqKJDf;]mbj.4D%c)q!\RecRO9g>V:qc`GAY@%<e:0IPhNdI<KYMXG&k*s<.o(l()\6^(8VX,t>h`ObM#8QteRal>NDE2?9^I?`Qm!8Q,L.SN_&ZH/g%1]8&L3V)\\5TZun"nVTP>5GD(g/HFOH2XUQooleuG[A/L[Xt?@K?<F<BsLB4^Sqf4F6*"`Ic&p2a7bYID]UQ`rTEi(4fHE-qX$Kh%h`T"<VrcrC?l9`f?kG$dH:+1RDi4KDmk<-iq\eu$c1dsXIe3D15>\g%B#2-/D>[FQJ4Y$4S^f"AQe-/eR`#,j#E[PUH<.e5aiCkl%'^i'up_L2Jja;H6jn29SoLIlcj`At9f5J**pg2_M54\PE%u-Eu8W2d)S$6tSXF?AofXuM.VJ#QPDVc2PlSndphENXakOk=9eSbK#%AX?o5GsX-Nf<6jiBlZo,Ie3F/P16);pNg\*f"?IlMIDq'Ddog3S9b'Z#.>'H9.L[hlUk4GRFcA'5jX:j[dUkXIBdJ=Hp#rR3(I;i%]q]?R,-TnrbD#NCSji5H[Hk.XX5>1PbB`^U9q)`KF`_BHfC:5E2[Ogg3N?:!DX6gi8BVUoDUi7NI6>c]42p_rm$?JC`TnaT_OIA2%l]7=?SRi=sXn<hQ_&QU^Rb>PjYrhD07n:k!Ljco"f8lHsI-nBn^E"KahYUF9g%OQ`&)ZV%([aM5Gj<AmDGqW;H+(;5jRg'259J9c%n,9b>md8[XCDX_^!.Y"F5Q#f4](XU";dBpc/lgMq4LnVN3:lr`2/KEXY(huZD,iflr]$kESNCPdHd=<NWUBfZiaqfKak]1^?\dq8%lIYdf+0U.*pu6&]jS#&bW[FDC&#s9Oep"/Z:>]?Vr]'q"(%IPRXe5O\na[@fiT%N`[m#1'qs!XkA+-W!CLDnrF,]I5p$U*/GOih9%pTL[^k1'!dgNS\VqWO7Ra*0aa>X+qJB0Vsbj5*pgoU#$Uf%5A]IcodGT?hGf[5JS8C$"F#mGG+L2o?;Yd?(G88(cSmOUnXfColE@%rSq0apNr3S)-siMqJA3tp9st2P6,e"Og>=rSNjl<Q?KMsAhcBG_^DHKIQ[;poU`4VgT'MmlJdN_qCfThYAP>,GNZk6s4^2,,]+c(%ld]@n^=ucQCm7F9-Loft^G\9'r;GG3@)k_NG$-,:q-<^_rCUL$j]d7KD&nAVq5',cVk75oN80d2,^ngC++JWVjOF%tUBn.'*rh`t%9$KFfei->d"ktXPfB2NmU_uF&QM)\hGP_$29:eZ>o$4l+a3-^Fp=n'(X(PHs?U&])eh&q6mehP4g$7T>BMC^uco@%Q_U*l2O(7Kr%Ek5Y.s+k#@U*R0+:UWJ242Zd<TARL(KX<d!:J9IrmFZ(@l^@P6k$W^H#OR9cCY+#`E"gb!DD(qbrlXBhk8UGT\58g/ISKhJJq$nI%A4#SiT:TCN2a$X3Ip+@KE+ZVgec'!jr56uq]DY*7mg8A<Y:caHDQCtses'4l<Z=!34.T5kH;gAm`G]Ra.K8i7puZeb&%;`KN]^%K%qgApt=sXLOf4Xrt?,aRIMt`:ZYBMUi?<V'DGfEr3U">^iVePsC?f>]$!U)7J4>!2[+/m9J%6Q4dLA`C^fDAh?BlcE'I%jsiRuJNY%]eT0H05G>>Nh&DSI6"`*%1IE[NJGFE[a@<;.t8+sh4sYD)pcj&3;[IbjSeE-YLS-aI3Hc$)\7BM%7eNdeD;P!X<nj02\2cTY"t\&%E:dnFDtX"((&r@E2m-LK\c'_%>;'Js/+r1Y8sA?QSHiK)^3t1kg=Db.!u6)f[iKrnXaCIq^g>f&#D:;5;k%(hp&7FnH)I8V<9hHl%eggXj=NMW!n`$O^&8l2#Wu')VqWVS9<Q(SZF-gZIB*F6CIBX<uIIjs@5<W#ckeA6?Cj7,OoB)kurp]Q9Gp]T_O!"C.M1'ZUj*7IV%=1n(d[\'`%C\(>GrUuMcrg5@W#aStZ8s9bHJ&LW6$jG2$V[%j_dB,B.5!?$t%<^nLrUa?kT3gefNWd=,lJJMSlDT]/o[lsS?9c,L%iEZ!?qU$Cgs7,,Ai2t_'GkSDA^;$pbBrmo9\/$/c`sTeZX!nT1mqfF53'BB.hIb(^2ckKTFG^4_8WoR8cgi:a2ijJ3^%b6]gcSp,%aX9Job)h&Gn.Z7!=u;RAnWHNhm,%VAjS@^&i-\'CV`Qc'FUFl2fr$Ya+YDXY^AZ[W)U%32WtORmYEOG\E98MGoC1Q9Fe@/20-,>T%!tUN>L6(_tAY6`FnbU)"J_2,PT/jO'HOe0&CZ"m@PXqVLoY\c6j%oEKQ%l*VKk@_5cmNf>>ki3=^n)X]79ec*9qKh3TH_+\o(M;8%odj+R00bPQfDKr9o8bhs?^>a1`n=A9N?9ls%F$H-KSqeWTCOgRYAVgu5KW&\DS3!cZ(D6klcnIV2QhLYr`qt#goa&*Xd1a>`dQ)6%63"%Rm]HL()WR2F-"f"O%;k9"Fo9rl9<.I::WR;LF6E3#kU-/dHD*j"f^_6@qBf]B5+VQ&<cFt+Kiuopdl.L(c-&3!bE^naUclFR%>q44&;4_-]ZTW)qqG_]QZ?@D['<GG!IPk-0F^cV726+0l;,j6l5IdE@6h-GOltN&p+i!cklO3HjYmQGHG(Jh%_LDGF@1PT\oQkk.%boArtrXYU)4QS?]A$>!j%FXVhD>(N2]@FpoB1MHH#GOnO^GI)XN&sH((h\`o]K5SQ[7pFL)DIl_LXf<>+2@4,pNBQV^biOX`9/'2%B9fkc;?q.?=DcjM4t9an_sZh1X-mH.NkF,V-LW7.\FT,Do;R.KjEFcWoaRUl4Su)O/IS.*$du'oa;s+miDI]"U8MP=)uj56p%'8l%9Yl=Go1/dN/>tK_$i%i-V*ap@Q]@q!iSrNL]?CE%`U<Y_Np0!-D<c"Fq_KpWZWQ_`s*Q*<K-U'0a!YJd#FNX"OiLDtb3BKh'5fuO%*<#2P@_uN$i]M`t\sg-R<qT04Sn$6L+?=j2<O&1,#\=kIaA](jMh\R9cHK*N4MCGiYrPonX;go[DPU:C^X7QEIsT[+bqJ@H&,F-n%2HSIUX-f$7nJRQJV/gJGDE"/Zs!_#X*kt^hXQ'1j[3lD0/!j:+WE;B695t[gO5@BlAZ^Ask4I[Ek3o&"N@TL^`cB]2;RtRTrR9:]%7NTubE/obccsh'4=:Z1:k>*a2MpASkJ"BhcN`E]lo8DJ2K&PFO>X:*b\st1L)!f2jAj07Uc`o:0^=ub#1t7NDdF%%o3S*0-e10mY%>+;.=EYhY5Sds$s1`E/tY4lcW9.MeoWZ1EQmWW-<9]+34([B#bp$:/H]oYBWp?]dn2cP^^5crhSGZX@=,Cd5-U"Uu6et30@cPJFN%Ge13$*l'l.1et].[C3L\%IXnH]?k5-*H0LFPEos!rO]mPb0AFaBZk8$47YS%pt!Dg(X$0(hS)tgqXa[/S^H>@o_;%P@'1OmS1T4r%YKrKK]!LSC?S>a^Y5ItToaBlb57]E5lUA!@\pLFSqppDCjf`Tp?K"7F[:.T7eo[,+-l_E[lDk`QSisU[q>$$/k*,8OZ"Wm9QduO+%bjTYbIJHaC'M`$7rUO.!59-GNqi0M.d!r&L.pdRKp3\uZhVR+K[[@A=f(HA=0@-j[5cgn[55r)FVcPn2RZ$p$asfR.^$$j!Y7Wqj%.fW*CG3L%GH?LlD"5)$geB4sj5&R]tn74_*@DdK#[*kC':Lu=pp%$V3ZcUF:p2k;_07%Tr;Dr2P.IBtKXq-CS^`Knj_C\+MH.B@$%$HA1-!Yb'!Vb?CUW>DNfSbJ%,]W,>IIi.[3%hc/\+-PXqG$("oWG!!UGSe-o>h2VI!%QRGd>U<unn^EKSb_fH$n&/2/;g&Yf]%M)%%ZAQWa<iRtr-Y-;2/G&`Ms8K!++shlB<7V1ek=cW`CoC@auOP5QVVh/]H+XGIJM1>^P5g>\96k=2CPdi+hhjJFUVC:3g*aa3]K?>%NICIONS!ssn@Q-K/,%G_j4cMa4S#[.htqg!osI:Cn).C;(Y)9G5P1/c:G9\<J,%O#7b,)W_!A$;S(>scgH%,e?i>6`1@ho6FB.fL%ec"J6%aVnhA1@D8D[kU_-e&&o9*NqmmGKV]Ojln'4PSkHJ(3=54K@,-MV4m,cqe!rC*&f6%p.X.:DVEoD!K1g-caqUosgo"WScQ:%\TT=$5.u'@qXsVeBbEJ7,MiILU&7^!`f<4n([R>ODUb1Y]a^i&Tmn-_##!)PSn%;'?'bEY<=Q%ToX*-GI/T+5+)YCjo;gKH?i0@p%T?OZ([b?1Mf!-c?fD[#'XW?+I^Lb%=]Dm(`WA.^22bd,l)g=N]h>VBj_s:C-GF-W,SQjgXHqUI9].`&Is0038bP(u7FS4J@kFM"r%:WmC;2_O"B]QMEPX4pkI?>_E;TWS0f.?$2@H(p_^9X::KOLY.jE9#3f@s>\7Ie@'u_[E6joonioq&@n-;OLrK?breXO,ogYfC'_?%Fn=W2r;'7V43WTFa,aJ,2`>#LWW)SW#[Rf8i7-"EkJ*YMYWkb$d`Q)u<mAnX@+;q!HiEgc/)0=o:j*Aa?;EDj?Q&N[..6?KV1/4K%+_qK&gredBX,jE%5Ic%+jl^EK:N"s9i-sC-H1]P)Vt8eQgA(I6h">XQc(/Xb>r#4%4W<`p\FK:E#JXW[l&NDYK6agS6;FMf2[p8Y%Zl#D^;>&se^AZ4VQkn7W?:edm*9CaggShJ1j.`r6PNaH;MY@6[#&(t6VaZN*2.404AV"rua0]sTjrf(sIA:*.<I%qto$:t9`kGXU%+^Me(db2t.C[m0CeH]i#!<lq5omr@\"VcbqeHb6h^(lH,eH^(@3j9MMW"5[Z0;(SSW]opYCAV$SAlTpDd9&YbQrSQ:>$47EQrSP_%e<tRsM!7)Sl&&#=H+8%"%38)#[,hJ?`TH77'CU$kmC+Tqs%:`1o[U?Wlgm\c^;!3gq!i\lLY]L8J,&Hkol0is90/1U]6WB(j#b/+%Eg(@Hoe6,i-d"!7<u1N$UYkZGBe:(qol!Oj!I,#b-!-A_]-M,$,VAgeM#R5<rJ7hn=**1OZMtpMT$CU=N]/MXO%:>iqB7:5c$?j5%r7CnRO*eP[ksY7Bpupa6OK]Ze_KDtNWih7FAMF9K?IUMea"fagnoe_9oUGO6\,L4*i@<.`&RdVQ7gJnUqVsH]5VB0Mm3Wl4Dd6Wc%Ihat[hAC-0p;IOR)*_+uGe2k+q2"j1]^-.bcME?P?Iu7O7-SL.dr6k6,^Cq[VLXkk2d7Y=EM_FbCTY:&X1")CNR#M@]a5YQcfsH\%_qOn1l,A!<"h/qF1FN\@C_"!ps4QXPm1&I]Sh&Z-jV@5/rVaePDftIFm;%,o`9cR(<IF46EV%,nHn,Yta@l+e"uO_VdR[Y6"+TIq%)L`U3fLCeH\=C)7(Q;;",KkbB:(88(*!H-+mFGm\[:9dq=-l^o=-r%ImDCCI\,;-\]XN&)UG(g!S+6KdkP"Uk_1K]Lb_sDkZ`:[L%>hsf"nnDRMTTf'-O8A=-qqJZ!Dp\p,rjRCCT"*ktNQ0H_:GN<VQ"`o/X=\ULIH`Po!*:oP]"^t5cndZ`oHp,B_`5im39OP21j"ia%G/9R#*C3S:c0io.E>bn<`Q&.on`T(t]Ca1Lfgk)Jn"W&Q1X,+/F$pi44I`Q+AnC(pm>lZJ!HbIq]5d[l;8pN!^Ya16G^!\:)L>PS%SF/&cq/A/jnSfjW;;M0?iE"X]_r'5Eqlgq4DNYVamkH@Sa6r=I4NFlp/`q4tj6_t_kLcuM$dZ)5mhQMK<5FJ'I2,Rc3h1FOXW)cX%Q^)iV^%o=nBKUZ#H+>Q0bZ;]@^DESp9pj\Kbaa)<*raj)iq&BIpT(:LGdH>HI^o9C_\3jN`eVsLdC1lAm8'J9o?kNjG]`<)hE/%B%pj91'aN7fh]N8/(il0,g5eA8%;"8#ln%C]c#7Z.u;lV?"BB@'i2]ij$Q7mFUG#"O<&&%abFFj2Oaj]D6MpFo9?al%9mJM:i=E9D8%GtR^#3hh?S@DqUpCc!i\H5Jr'8(Ok+XMq=5?^l]!5)-QTM+SYs&T@T(i?:iE#88484Zjur`6B#>Oq5@7??$aI]i-OD$QIZN@9";R%]CuDT;CbtK;`,Ag<]DY+BU]L`RB7HJ/LP?hC>?=)_'ZE&K/iH#5Rp`&Zan(a+7ZMocE6be7fIcrSg!P2#8.tro",.6/FM;qE->'*%X\HPoOD<%Z?Zl\%13n8O)U6G9Dt-B$Pu0.ED\%/!q^7%8'S-I`=$$0<s7#GG?[].am'k"3<Naa*s6f79jngFNrNZ02o>CIK^KfXo%9`dnh4?i^#?<kC#TJcNC@^>O0*8_RM1I\s4\446C/#IT&H!-E)Sfdo2_FKFDpXkLJ#1%EV1,iW5HcT8qr)4Th(U'pYL59X;S,3:M%N1jq7r(6lTHVLtU7MWU^Y)As7/!'+*>Zs^KH<%G?8_`t#Kt2I.3eHPXMT!=U0(Mes`5tfn%F:BIn^HM-2B`^hQVYe#f7*aK9n"SU%rq+>e`eMACC>>STRr>M0CZXS09.Q@S?[P[C*68<\`0)tQ=`,h9M:X7*fWpV`4_%aHr74/Rm@V]g359Si"V8jf+.V4LQt5bMp;-R,%K+`,ZT7([9Fn"u%]<HC;AE,8<SmC*!=^GSjXfN(SDu8#HpF'FA?.j]"H?]/^hqK6=e?]"]UAs61-7g\7QaO6nMZl.hZ#o9Rjinlb%gqA.9VlQlA_qh/SB,d1%I(K0#ldP0D]?`_>Hhf4c#<r^ehn$CHG.CQLh!ungWHq#UcsKjoKDLPjI(!!+?`*idp`C^=npC5tp/3cH%Pc\`79KuM!#Pg[;MTHfj`mp'c&&'s%jr_5oG58uGV(-Y>.f;7(nics@(IA)-XK(A(QQJGkQ=$Ak]1]S1"'[YUo"(UQm4@dG-HNC.%r2\gaF6V*0V>.ePY[W[N:Yjb'5L86$I_!&&EI[^?/sbsSqXAh*eaf^&YKrfR]=mn%q<k;mg[sO<catjp&&8&>4oM72HS^/bq<l/g%p4pr&NAFaaY]4maq:kF8BY&#0GT_]W<D=n8gZt2urffa5MFccOT>,dPq;^/7HChucc@0rIU_ht;,2\i7\ep2i/T4m>pTCF`gNQk?%ro`spmHJb"`rD5H?En.\j=u'B%sc\l,>dbbI;Wr;IeDm%L"_@<2Tm&KG!CtO]s[b6e*H18J,]BDjbN$2o<qVYC@',(.5ZGNJ%"hE%q&FmooDHMtSWC&<:'LUh(SBQ3^AIKgp4o93mqhaM?:`2s'bT+E^fb'KYO<XO%7E2ShhVEMIHC?AS%maJ8US!YpQjX-nRIa=8f;22%/:/2'p[j(m-MYAS]W)k>F]2Ec\q(Ej+)5#89$\g$K:sXIo")!@^jGp&B.;2'JTd&rXmJARDY`[_pB)AA"looJ%<gD<79)Sr'*a>M%,<jL^C.!e'_6/`(hHY)5@(]oA%qtP@<#8ugcqj;1VP!-c\T%_r<@LGM<iDA*Lt\Z\!S`pLau]D!b0aPWA1-Ci',,u$%(K^TrW=JM%2/&MT%7X8([FL!m#:alF&E]HJ6hQ!S_ME\@/.?:QnhS:(C4,4b&`?W>:e,n-o3lF6K=T\oh,8Btm.*+<2ODE$op.>-[:$h>Rb=[h%QR4PdMaSI=k%HERVHNWcTQVC#CXbUPWcO[>bYA4T.Sg`#q[bH0N37PAADR`";d4b]N<h7hfVrQ%Y+5Wh]GabWk/lV>AKCu-AtWmu%fg6.2k/!E*cr@9&MT-OK7NRL!_Ih,%;+3A4Pr'o+BEDY';^4SR+<G<O(.8[5dQO$C`!Gc=rDXBH/+0LfN@e4-quIfpTX4plS/jS%%CFD'J+)(*tpD`Bl+L]$2O;=>VgaGmH>,%hWfg2D&/[<6%FB%?,?D^)A[YTd+WoF]7jf%KQ4S(8R?^JgD]%P,Q,,Cs0U)P\WF'_df%DEtKPQ4&6Z;F*m+L_<E,hRKkY+[cJY>r=GnHT71SU8D6u&48?8)A622"?!u`TU!LOW^Saq\TJ`gL8V`$r35*20,'oqVP/IcqB_sq%Xe?Z]#9Cr`T(iKQ'Eet=D>L<=/4c9QKSn:5T#'1J)eNQTE<DqA8UX;U8rOikg2aM/Om.9!b*6G@G$m*i-&H5!8?HQ*.=>ic2T7h%%[&0i-KT*0H(n"S5@l1Q5daDoJKt.[l(CV*SS]7[0fmB,KhB[5B@tq7),tUjpNCI4$\!>$]'$[-<bhN?Cb\_#6FinE%aS]U4:nFQC%f\Wkn^;IU;d'1f($_W5fkaQ/-A#F(G^M:cS:P(97M6fsW9BEs!YL%J^MhQmpH(5nB[J-$)nu:1$#J\Y]q`143k+B^a@=D>&WITU8%aj?S)9c^]oktg6A"DO&.kkhU^]GJeaItItMmk?Ko/-d@fHNBGriM#HS3>>JZp17F-?e`DQ(+T^-_o'lRLSKQa*4hgsC0c&FU@eUG%.Mc6IZt$9Vb2;o$hm?'&229V2l0IJ.-@V^FOVCM'luWWnIpOOdP"4]r8Q5%R.*`tMk<DCM;EgYW^+0HQHrI)W/'J@)0r2%:\i_N.%mfgI?=\-R994sDT=nkdWKp]"XSHch]=\*2B!*/,W(+q'EkI/.2M8?M]WK;djcA91@>tLF"-4Gja!FYo>(]:-V@:]Y&p[1ijrZ`__%UB?N8?^i<?")"Z+`gK1c3/:Non'qa2S0Tmr7hVh0#P@bn-n@Q$#0OhE=FAq[IEQZX;MQa"_X);^d],?mK3t;loRj/XV@W*E?4JlG%-;:ee*/_SC'Z,,KWcV(EhLk*nKFP)Ypcc2a#r?6(+1V,9V>\%Cr0BdFF--<K-?$1WQ1.ukKatP]Y=oMecJ:F7G:*bk_Y[!mC%ZMg%[27&`/!m"e1?>,QV2Z3WKaRo9.f+8aluger]htZco<Sdm53@34GV=<UeVA2T6sPX!(4WHI"+3oZb<bG<j?+Du\6L^mRi^(j2QUer%JZ`c1625#*pl@8uB0oFnLa]CaS^E6X'VtTrerm2*!E"k1*@o)$1-BbI_i?;?8"0$afi0i:cYbHed%SP>.c*u0?F,!:L4;T)U:bF.%GDLDZ&`>WS'BF8J.;H)@i:q40cTWD$2B>kO'_X(k+pX?0?j[pj]^;q;PaUME0J[YV%[l9C<^818*]0lOll9El@"s+Ypkf3gnuq!N%"83W!T#@[<hq.b^af8gth0Jbghlko([R-clUoi"cOtN*hauR2mf<sq#Z!=foT;ql7Ka:=lO`iKkW\C9l-l:L#l7Gt9BDVK&e*!9K%Y?u0sSCZ.n+7F*^qY^'_LNn;(0\5Lfk2(N4%Q5-?I0ul.LM)]Cn_8\Z9W,B:.b%F+Wp.Zkb?J2CG>]eL+tPgrm)sUU2RJWeX%Pci%d+"*3]-)jd0iVpU&r1p6f$\(Vm<cODOZ.6d/te*R)1-QRbg8\Z`!Zt`7FhIeK1bro*Q(j16J`50SVA<L'V%d80!6^fGIGN&)CKF4%:CkN#0F4#<b,I`R9rXJN6sUg`eS=#pL%ZC?YXWnGQ>.f##k'pOi*TO&9.\FM2ENn+&0.3BR5JP96Yf*B=HhT3XFU%R+MLcu8A$i<%Mt_5Fp?bT*o$H=Oag)I.5h\#q#V6.2/H!2?;hL`Y82`n))0Yg21dE[$Ui]>r&,%D=F+T(A?g_Vrr&,@56\#t\@-9W3M2pM9S;BrG%1a(<?!1mu56.lU.f&56`1,hr@mL*ke(&Q*&\0P.k8;;KFOO1c4(5D^.MT#8?C(+ViK\EcMBuOD3i)Lo>&DPQD"t`<R6(@AuCuFCZ%51d0t4,rp+d&EI'f_UQf[?Vm=QcJ3B-62<7[@q8%`i0l#T3G]aKSqY2"eO_lH^^,M,;j?=Ghj\XM?rUuR-'hshN6sC&5<HLr>MJ?%q]>io"^&*k6,Nl^_&-hc2(]qbU*(aKRsjo<qc&9q;-B:@(g,90gAY`HQ;;=]?+:JoO?n+b/$PLtO)t]VW!]Kj5NtQRK^Z:aVep:*%k!0A1Qs4DNqNU,nX1RJX9e:0tb>:25<SpW[?pdT*nPHHf4IVps3(cepL_O+lcpTKO;sC`#Z*j_V%*2fcT2BOCJ5farpn"bS<=@hh%n&OGXeW2UcL!,@J*3&gp_+=ZjY^mi+7:":D7K_#tNT8D5=UH$3+TBS4$97!jK8knu&)-T1&nBkp)nr_r?J$Fh5<SLCdo"<20oXD1%<edfT>lZMEc6A@ecp9-@LY*S+^Ba\%2ddS>[^o=YF>CbjB%\0c4(CO;-iO'01'XX@07"Hcg*1f0&u^h^34`gO!Q%po=-\V7WMb_;%6RAol86[>[->>h^CGU'7G!;-h4!InQC6BOI.)e\fV9>ko<&E9[RC'E.gk#!UJuNM\l;C36iMM;4?3c`Mm(U#C%@C?b,mR\u.0WJI%j]i[HkqR3&"<NXsK&E8q*9L2d>cOo[3_Za]Z\5ou[^HQR*<cgGhk)m9XrbORWYMQc)MT'VWFUG/Q"snY(`Y<`@+U4-_`FGXN--a>%d.fWJX77?"</d(S'$=6U'fBI&GgJd4j"gp*q&&X#I#;BBS1M&[qS3`g0eoY<%5[Pb>B>C)#t,p'"B6UFjM5778@b04keN/(4CeLj%XL=7+OrrIffRIRe'[R]n1R_<M>/9:X#\5G-V_,dI2Z'G*njUEXH6AECR^SOF0nCT2A!J<UGlL(OT]5h!VQpKb*!?aP"JhJ)1&3)h%['8*%ecfBDi2e,(X#+o(373j0hY=TA-0%Ar<$_0aa:hV7*9d4Y)@h/-"-?FFCE\d7Da_Q"+N2D1<.i/?<9#/j)C6%f@+2WqL1kCW%f/8SU<^7%V*$>n-jJp?We5T.1]G4b6OXIeRb?A_mMLO?:W0->%E5]PL*J()2>!S)='n=Cg%3Sh:L*8Sm7q*t%9R64Q"U]-6b^VZ)%n[*HF.cmE3cAO*m+#f<`.X8Wh:7Z@8JfQY-Vlmu$1>k\AB0t]f4u>5rq)TQGi.VY3_hFGNL,:mP$qUIQeNpla4>RmG2risiTh%7I%#1R$$0ViL.Bq4'l:-p('+]d3kNql@q1&Fm@bD*,*LuWS\-5W2Q*7&=(@YKL]J^A+YbYsQGLNl]^[?mJH.U":`F,a;GfK5PGg^sUQ%EH*`F8Y3[C&Jo/4FgQobB!e6F=<g^pH;%4m3UNI>7BiM]!O3BN!o#FpZA(IcW2X=k?t.!oiCafp;9]F(S*1Zh'[J9HN>p57&.*h>%&.'i>HC\n^.19-mZ]@4W2'Ts'a?VfR4(^>a+Ko;00(Ob.U(EInY^oIK`7cV,(2dl;)@g3\A:e8^kh+E>dMTXU2*rF#k(ZkY$j_ju%!mrnRcj4p6CDu4ol$s6o'ti+BZm-2c@tF\q1or3XZso\GGdYEe&^trfCEqrcaMHc^,[a[%645mj#]*o7L\4.5mpojA2DVO#!!.8W%G-SIfg6g7ng<eQlQ>>/Y&<83/$X./Fd'ti4'P7i`(<<GL+KShSJR>b&N/j?5EU5,2jg_t%IU.d5Cj;`K!nJ+gR@ksi$#3kbkoicg%N%gH!9/E`u181BFnCFSC$^"VdFhhRE(J+)p"@8hGE/c_L@hG__HIcDDIADYJikLI,`$PcP""TD-OsBa_^Jus1!qP2:Lh5pb+*k_9%g)_a*@agcUgVFk592066&g9tW;gH3<V,)X:^tJlV(%t8ToMd"q8BiDG^p9`OV+VPM&t6T\f0Cki.h.](T_UkbXhG(o)H(OE4Qa%h%[1(hu45!eVg9`UQ'[8URIKWe,2'T&'b8!u.'e3Ad7%f9Vd*1(NP(jA`/MiikN(8X0W]fgI$IZQo13=KUMu#tZYj`JW:O#V!:D8R>%MN)`A@%*V8[#M0,p0:+6.b;EA$CYNm'bKJdWC]b.275^)%r-V0@]@R5nUFq\)-^c(*2IRo"e,Tm;IQBABbNZl3Ef8n?C(EtT3e7:%6I[TejoZ'Je(5<`C^m!>X=P0B/Go[*1"LDa@>BN>`K3A%E3)Q$Oj]]%rSkjTDBP@F*:"-6M.WK%qLm7Um/#.R,tkLoNoa0n0]WO]%N8jX?M]h.,TN\_.$6i^[iKo^'T`L%67uc$rA-.6aajs4[;,+-Q[51(Ih:0,XqLmT[`M8P1oA;7T"?*=d&Z3O#;Ic>2LdRmo6bK$F%A9H'8>DH<U+Zaotk#%s"=BhrS,maWciWa_)L(*7YTrM<sCRdLq[[6q`C;`\nLQ@q31ou4m&&K=!cVZDf)bjh\`*d?:&up1?@>O)#%li>&rmS7U9IM@?k)/%tuYDJI'We7PW&F"<aG$-cI4k(cYo3n'Sfd%/HA@7T6K>>Vq%0\$>WdqQ*:a;XU7^K[?9OtQ29Z6!uQ8.Ki%BRV?)_JJ<T0bignJQrrEe20"Edj*?g:-7('QBgZZ0[fHm4Z?ZeC!B$!aQYWsQ&I^8Z,+%)P3f?1Z0<gT0@Zm=oa,%&g/ZBGk&e9f%5S[)R!?qG*SOeo5M.J-_q"pp["(H\k]d)W?pf^1QR]fTjbN0YoG$Z<E2um)4Cd>S3F;uW5lUF-;lp;[>>t(j2CD]`<e*)$jk\=63%,NLT0%>9Inf/bt\q07+:hgqJ89IH.+@92"X1^tR?W]9U>:^^fu[V;>Ve>dLoPSd-CXbd3s-Tn3$)p>MQA1090.&fc2a3bkMD]!aO%<Wq3.dMYt03?na?^d`kdH0q0nE`\"u,EP_\7Zc>sF#l5#:_deUF`9O1F'(cGC=:=9F[83G+iqZ82(h.?aP2Zc-Rj:$[LB9;KXtr(%XARq=-XI\g2<%<p.+,_fOKCs?5uIq=4QE[^)]Qb?NS>1#8XmJ)=`&em=],>O[OjA@$O)+Ve'1)IL/CmC3ND.XR2/X5n#.]u=Mu>Q%^(YQ%O"&qk#u5#`JYOtf2(R2[a[7G+3&YiA6WnY3'?'#bM/H21lZf8n=Nl-Fl5?l_X2g#0:?/Fr2DNuYdk#'*j-7c_ll2)dJ<UGH%S@0upCV4)m&12ob8M*fI?n>>ij5iW/K64bk'ql=G'BT#p_[mdQ\HSjZZ]@6-1lgY@5:[s/.\ZTZ1e4!([!XRE73c1DQ'N:io<<T.%JEWKBb;i=ZRV$54Tp:dLK/Z\le3oJ\<^<,/2=#oi,D7J1o_T,4_If7m%IYlnCT3Uu)8)kdAM!O[GUNU@X?M9&JB(Jgbr-n8Y`FX,%m:?2m'd3op,K%ZsFH!UsA`ZkA-Q7e5?>gmR]b[/eN&YE)NYYf+NE^-<%lr>_DM@,\,UO8'"($'jQ^<+!X4"lYf[d9/%J4>J+i6<7%f#Rk*WW6P9P.X=OUSHoQ@&%KtS>K;^dKsuR]Zk\ge0<qPUqrfg3t,/TM9XD]YPFt2AKX$c@/si?=0W^3m@4#f#W?!u-$s&&rLYA\%JQCgHhl(eX#Lmu^j!ZXSTt3k!M8uS/<nG`tM3$?"ZGWSOeVJ2`B+-#?6COX'H.1]1$?b4`AKA<V869BBaJ"D5*cS@;MU'$3I1;Ds%3QomVc3Y=YV!ud&%O<t+\:S"!SA*6]+ecjmDg33@XEVU!iY#ARN@7mmK#g#%D1Rc9%UNq5(^3be`XqT@P$p;M`3A:knq.UW;*8s7%D:[\8V&1C2D5G,q.o!*_KKN[$%ON[2Y]=d20dLSKo[&J8B#nB/L^+2"$bht':Y;fNLeb!GbY3%1h:*XD^hiAu<MYa!=W9,pGYL_1%)S$-Y645o".]I<=4Q/0"gq&>iW4fFhaE8G3@Vs.YH0j)f8AWfp-GE*m;O*b;:n;8AO9d^j49=J`1P9e$e8f-[pqErJYs\+W'(7Q6%+=8hoeg52NmAm#f2Mlhk/)ILnZKi1,>kmk9>"N3[0G-T*K9apoUQ$,%?m\lR_`WWkLYO8pJ]c+Xf4'FN12',G_5RV33^A)i+9RBB%m%I37?-.XdH71^/Y"F"H;i;4fOEak^CLH=[R9=D]R"<uWBXP:',pq\hD/?R_HY:bA+:\SQ,[%'Tmi%76:C#X5b^C=LV8Hg(%HFRA%X*hS7no7<UQ+sToY!"b,Y&t^g#!IeSZ1H#p;c._C%pDn%#Y&=n)B-(\f4D?,0^r,"dBR8Fel6!Qa\drhqe!Bo53B7iih;rZ`0JIT%?_?i+@aOZL0N=`,,%;c>8BKL%3B"ub9J+GQKX$eZdDiLQK5@&IUWUbf&gUN_NSLNfjIF^X7b]V'L"2Ga'=/HDHat=5VZnZ`,&XD[%Lip#3",IKX%'a?F8]3(t^T?Gn>oc=aM2l2ja6+Gp`[N#7Spd0;/9\*,kTaTe$(KW;lJf9q`@I'VdcsdTM_[Ce=U?&2Nr^R?]Kt6G%GW!acG.D!;2=!EX*dt[he(BFLlq.G64p#V4HO$>sJS>(Cbbm\rehg.ZE5G%[f;!0PqgP'$*.&f1N)IV&LQtREh4b(XLKf5ncT3]a%72@.bTsaf[-4SGTP(=6S+L`oa:VCR`'*(e1>8k<^[gOKMlV^mbY/Lh9&2]&/<B)>A%TkQEWsY!lpb\23pg=/<gCC/qk:\lbTWKLu%PkYlDiQs)'Y\dsUXrE?0UhCHD-/LoMCPfsjRcbfD[L38gp9_a^6]0$>Bgn5B[@9fPi,B=]Fs7ArmV+bWj!109+A,sCi<pudO1*4I%K]X_]"H.UAW7.ht^hc>b0k+Le&Rr-h'$%k]&-c,CDB<_^Q3C5]Mi;qlO=i#hnZZ4SMN%suD+okR3!Y(SZX!,&9%=1\&qjD]7>oJ7%bg(T)h,_OmI-@359aoDdLs^bI(W99G0FrDu"0l&VPc'BgAe[&#W%>3ZBJd'.+?0g)dB.Ql`s;H6H[r?RM@Ief#,r!_nmFsY$Qt$<%/5[oL4E\J4*%BQA7FN6m0Ie](Ftb/L3O,S"&F#@r^/02K#:X08_2,3Am':?YJ4#e;b]Fm1Y6[-t0&E2]c+*P5Db9HLCMohr&fnrh%M-cVoj5=khW,YnnPRIhB34CUgS&X,aY2]4(3\.L%".[Ab4``Z8C_R4=$.)*XPZWA='.4iJ)Y3-^/O=K!,o**XUK\"m&N&h56O:02%&E-P!ij^j*Jq49L\*4Zh_N&db65Uq#2k2IS#R-JQ`H@$VT<"#IDD$oYi$TR1AP&;g/YLUkilfhm%Z91GIt^+_p5'[?Kp%ASgn)0C%niCgX4cVs@S:Ym6?/fWN(H=\#LLQ^0,KN??:K&kfZ(A?G#/\/B6P/Z51mSZt4:O[JPQB0jHS$<:\m]gLjT=GjSlb$OY[Tk5_VieT%bHW<.#$"p*^kRp5ZV/6QS_J8#";iV[g'7BtG"Q!VBqOO!cn:>RjTT\74l57"6/n%n-RY?+O&/)4#D4!8"j#Fj+T@?78oE"58<&g+%\AhPd-1eDs]Q(@kc!GCoO\^7(,&ngH?-AfnNC]EBe[8ZV`@mbfGo0,+B6'Z``!k'@ll<YgfkPmd<-^&Pd6QN>Ed*-@^t[S=Vfen7%^*r#':mOh[OPj<CB&a;ja:Qb7=)O"65"(Onbma##Sj.kZY%LeqEk1a\c/ShKlnm^&a@&Sd4QsL8dm/WBr9"q8p_EV9S@@PMqht9]%(:tY>bi3BW[Re-iC-b%nnnZbkVFB'D%3,LILlZV7,p]4e>gbP^ZjVe5]oFTqi*#(Ab">FKFML(2%<,Uu`pF^o"@\e[[,PRB.]a6;%!n,RU3,8"I]'2PkG%SoenS+!U;]/XnJUicj/e]B3PgtqUV/@$5V9Tm:AfeeY`Rha91FjDNjdIh91;ClMAR%$n0mBknb)gnZ1/4EM%dk<34a5.h3'/nQ;U$In)Pp'r(hLmouXq;Nk.jTau+B*)S"]UGK.>F.l?&QiZ<!YB4)MK&[`->6T2/8iQi@/^A'PiL.D1j`F6l6kB%kKDR)s0B(eRRD6=$`9\LnrRE6or=rAof]dP=Tlbe,A.<pV,t=Bjm"8cH[K(1f_tLU)H+cggee5uQ88BV:FIoeb?a&b+i-iWTu@9>%'74V#^7q]2$*<[r]oG0%qgT@mDP0H_Ko\^BL+NN8n7<J:BD0ao/g70P:%>lHfSQGTYZTg!Q+r"*(0<.d]aCuej*;`TN+6EYG%VQ2%j.HYo<`s&);j,V>WsL>-;o_F(_d/@V^0:fWDa_FNVdRt52nrmF7r44)AmH;o.X(#h6!2ej^/2'kNfAa%$1!L]B#%)uqctop6tp,D%KO[8>`WIGPic0rY5eJ.QhY]0CN;0Xl[D=$>e90Foc<[ZTbE7Fc&fu>P$oO'J3(jCB+C8g#7a+VdU`tYR2jBY$%+%nCiK8`;+ZJ0l%DKguH9l\kL&]N0,34n0&JfRHK*8B#:]\ui2k<m=+pnr]&e1W=5:B;4/00l%IdJmGjAh'c;AZHTh;J;u.K*`JD#NsbOJ7CVjIa3+3%f!^)sQ1bZ&GmS!t-X87ag>GP'Z0PB:.U;d?%'ZD20X!&q1>0H0*X\#QI0^c0VbM`:UFl@^@NRA2(Y%h8;U&N!'q[$l<g21nfs'Jp%&=9>[<6&V&@a8seM.<ScR[^B?nQQNL#*7+&hM!g"+=]m5q#ea4bus0P%T\l+"U4+BJAW[eqc^Y+QpJ[dau-8C0X7VjJb)!_hci_W%#kqVD+BM&/(Kdr4gJ#]N;Miq_+l&L7h1U_9%agR,SQNi<W$J,A=i=O_HDep>hY/^7NtB:@;mR1nKoNie,:p#$"NtSkaj)$WDfAec%:FnR#W=g[ARmHhbj0W%?#$3oH2\iGABPRq+kFmOEKpi)Sg:B&&RbV.godD^L0TGs]i0QT#+ab9Jd:/=GPDDKd&aEdQbL,Q&FX^?l%5\8PO&3:Nnp57Q:bBl_;J4!1l(?!mij6UK7b/#K7ND;$F8pm6eP*q6/ePYI@bQ`5;pHDnb>,l&=QO/gS6rAKDje1!-cXL/`;Qr'3%:sgk\:p(5pa<LeUTQ2VolXLJ>>`1[2#*I+W2;qY>(J%+h$RW:sPpP;\%)J90;MsU=+^er9&i9Yf`t?VAnRsM1jXH<kfN12:5Qt-Z%4G-1\M&j=/NMG6iP:*i.TIo4/&i\5SK5j@\Wi.EmH1H5<M@Bq%`Yga?_1PHUjG9fQ-)+""-q"]HDE0[=a"G?R$E3<;$f\l5\$AG>%M<-mq0Qkb*J!Qn4hnkpNiL1_bNjY8%,"A%I)]?UK$]"\>ACeV4eA[.GL=\NFl@D?7@V3S:!,=0DL_*\3Vs=u6M].bTX0&IR$J&f#%0t,/(>L[8LZsU2/T[(^2?GI`!?XfQU0Z@e2["+N0m7XCRU]hFlEb1*<4_$0uP*AGKU.&>YW[>DJ\bJPJLe*k`XuQ?tC]5Kmo+%[[%$CW7;Ku3tjfE"Hq2Spkn6O#Pm+@-"Gf+8M6"*>]p`bd;m+K),QQ?->+gs1cm,IH-t/V6=oEIj<.+D_V6op8KJ7i,]^MooM,HMB4;%W>u!!@><e2J<KFSQl4dJRA#/`WNUufS@)#0")O'R1=q5IX&rG<0g_?Mg*0WQ^;Vipg\SNYUn\&;]gZM;;a('Rif)L:37qYe!Xm!q%W*h"ToTUF`)IJmbh\BTp[EEs\8AeP0CbS-q^*g/GHbp,=VY[o$Un\<Lgg!qG;@b_#388.;o]#(AE$9c9gCmQU':u"ZX[aLh46R13%iIndI<b,)s\[gqKh^-JP%@L'"/""GDGCPYfF?ue2;j1!7NH!m8Zb4<VTN,9`-a7!(JdPQ0n[b\-e^sj`/B;$&DT0c0FK-k#aO'&T%D-G$%]Ll;Bcr>K2MKEr+ri&h!P:@O1`trAN4&IHYAUFOe`[@]m-m!8V2cU[R#g<e=iKU1#q6[(nV7L]*$uM$OVM'oPX+V2r:%`_(%84OJ,H97D&<7qOA^,Y.]dc<n>$8+`J@!b9KDBe%[m@"VX%-1]qC6Zh67tc;l.CCKnLZK*u3?FlGOf@b$'Q*I_N%$?YP2;.=iJVar%5pE)8@ga(M:/Jbup`+L#8'CX,,J'Z35hJDIjGUCJmasiHSgUaQHGU#4VYWra*nME:HAfr2;;JL2-E-Es?!X;nl6F3PnA'./\)X$e%+I@/CP%D8CT]`ck>7aW+;E9a2)S/`Z+;n]!=e\PN=So5-!/Nut>=&t.`HcgKoUJQon85Y7&i.+,Aum:q3!-PG7b`+>d1M+\RIu+Z%UhHSX33P&bq%fYM8Fn*F9!UNTid;+LSF9kQ\'dUde!?)Io<:>jN^YQm\ac\)Va[;rF\*O4JF0ho5c:A%%/E5[2dRPQk\qS\:#bs!%&nJX;Gug$_JJ.-MYi'm6CVQ,M>+W0U'V%+lnMK?t`tNco<L$DAI#F8[mslu-dQj_*,7OB7S@=bo/+%9sL)P%VBaKB<9Mh8ddt&.p%>Hm%5#Es)\(0[<<KG9rcQ/!^19%Ds%eX[I7QSMT^^&th$8cuW!isb`MS9HFeKU83!e-PrdA:e2p<iMUNh164%>Hm%5#A_)^dDI=%%ZmDO+4CPsEY$3B7<u!bJ$5K7-g2I12^Qf!a*?AS0(ZIR:'S=k@cJu@gQGX3Nf;Y-6h164!>HhL_#A_*9#$R%qA/'D]#aN'B;j9&4%23h#!H]+/:mssf7dQl4+0m7pf^*=OtX-"81F$K*-$\EaHT6\UjGG)nL(+^<[_:ih(KpJVg+U.$l@`(O]/_,e]eT=t/.[hu(_\'-O%<Z:1DFG(fEM";e'HrY2.cSEQF8kT_5re'Z5Qk#??hgu$p4';B^[*\BN-)BH]*cLPNSF];60NqH_7F&AEanZG!IObkL3]b->IAm,p%kPU_)n"HfSj#odu^VSl#"h+>B`HV#%3%R?X=et,<O7qm'/:[Tbj[c\e+n.;M84"G(R$<X)0LsPmQQsTh$#fUMOsG$lZC<\1%[/0_%PqHr\cQmtb;)Pp8#^\sB`c.*C,qiO&\/5(/"eekb[:-NA_2!X3)\[mLra((sOq;X+[@`].o2$(FO["*LbQ9XCiZAbjE/<Y<SO+m9%)#FS#ecbTb^#1h$(@fg#hXEQ?MuQ2MLj+U'f-V47r:CKl_uE2,FZ]pQTf%N@m#tr`B_WIioGUa-]GLLC"_!CP)!_\9iBL0NiW0'r%lX,u(X:^u]-;D$<8bcj1X!?,'9I7UbWhV%PM\XrQrjWdBVBqpG"4!T4plCYmLFV7I>nD=Blc70c,jFB4R1N_gdD=id=FQGG\V/V5%9uZ:29/5'HaU/Ta\#L'2b4bF5n=(2HGe3]I-2aYJ6Fc[Q8]J=@Q6\lh,GZYJP_9E:6<s?HEd<3@K&GJ-;6g$k]B.XI.h\_L+g;-*%"c.CSP'_SG?^YW$9eUr(bBE`d[[EOnj7_A?A2(&1hfG>TZiF-4E*.XFF"l0'Jp&nOHp0-2GMg=tG[-'R(_st6cU8Qh(19^Hqfsji%V25^RBdJ%31[tM7%!TKq!L@i9TD*qER!?8N<7dY$.MIm;AjR:R(19F@rk''Fd_t1J\saZ4$K@1IV$db@Yb\W(]GLLo`5;TU0?UI;%Usd`_*ZuLb$(TL/J\r)((9m[]0,QqR_ShYre!_AB0'Gu:LNpHN-=HXp0A(aQKo&<g+XEfI&>-bs#ZqDcrO`r*T7:#'3P1mF4PQ:L%(*&?b7_nHT]jUd9$PSS;G.PllKQTi;P,,'EA1s7_rBa9iip",.<,Ghg:FG^(B**hlBTT&NMO!o,?Ej2e5*o@J[V"!G2WNQ_VA3r"%LmRMWrm?2O$PoA\nlU0doQ8q_$Vk+VabVI411kN`.*6X5aZH3eAo:mIeg6;$3]o&G:;7(Ya:n0_^)Eope[[+uY$NJ)BcC1t3t,0"%`9(n)r"^cRN2(7885`VRcDd99nj?Fd)U1)`^HaJ->9EfD1`8E1Q-p7J`JHL!>!LZriE7kRaWX5KXcW$kLV_-DPaKefgG!jhbSpSF%?e*m:#0AG'D-3CmmA]\BBuXps<FFs1U,bu-_b\L&:-1o9`VW+p'd`":67+D!X=`nBk9TB$js35M?E^JVX/Y4Z$=GnY"c"I6l\:U?%oeaCLLm`T`n5Pk<0h8ZVae<4GM[q\Q+Pn?-QOuMH-hJi1*TYn\XecYH"r`PD(U`32\ko*/[abLtnatimc:'akA$W1@>63hd1Y>Tl%CWh,ClYHA_BL*2S/lNE$0:_*dNZe1m@eViPQL-p@)d:TfnVR-J)dXR),q))a]SJT>9i2DB:h'/sD&FhVOMR6o[^OtHZ+eNYHMdUJ%*[ul4*[Dh]n)4bk5,bS46-eUjV1bS53OsfX3_IL&.6rl7Wq-!oW_LJ,0oB!V'HaCdP'42aLDPbhh5Mtn7B7;BWQV]WI2M9c41U55%BmC8#7jKc9/8@JgDuTP\$6:1U0;3uj$p&Z^YcOsX]4.,"#iX5Z52]\1o-nU'Xt<"0Wu5`QbI+a+)!gLSRTpE;S8OCobJkhIOT3Ce%+LV_*q2D@Xd_(p.DVl`n5Yc0NL](.gS2h:A/@X>">HCbJ;lNMP-i"%kg+nms/\jb[>?gO5G[L'k`q`DT=Am]eB9\V``"D(cN3R_S%lPiVe(Q^8AB6Pr>3<)`VRuK2!BJi,nL8kmBW\$`3C:b9tb>?T$#$^A5D/CB7qYGmm(HPq4kIq@I9%f,JDlTH;:nDHf<3++&D41rf%LE#8(jt5f1]K0!@L?GR.<F.:]:!f1S)]V%KP\V$#>[%T$X_+f6Y,s;M@B?YHEg6dTZ,a'tP=JMkoHo[K+2mRjOX!)$gHm2P),rq+%;&dn"7L=s64T7";W>FZXMmVa"QD(&'(<k:9[H0T2p%:sP/qXDT,U"LsJHUroX;"9)\qFLqY>St-:.nP/>#P?:/JVA6-HB@)-R)O\%Ap8&F628gH=7hDkaN5eI1>Br,<4&(0QF+*/9`J3RgNcfsW=iK^LK39"[k30pMNuI9CaQ#I$?B;YcVU92Y/s9?bd,1niPSi>Q'^To%XW_g].a(B1A-Q8\Eb-iuA)3Y3V0Wbr[5i:Do3fQG`VbnU3o1uk$h+Y(#\s,SRkVMQc"W4uiI.O1!)fU!P$+a&*/E&+HE_^WU:Fqi%628_L00lEPX[ul#P^Y8(Mbm&CW[-%Uf!T[U'kEESL*k;`.]%MkJEVNaUHZW\!t1nI-"3g:P]]Dp8r9sgUaAFVo87U>(?On5F3`s[%,#C1bTU)UdSkSu_(MD"0[,?m0F%-RF8:9FGY2E;#$;dN]59cb_p)6N#18L#D5aupu&.j-2JmU-F;c]K7/Qtl1lu8P;=m'f4Bm!Qs%BPT,kghI$LF_u!+%qC%4Rq!edaV4V7]OOG(.=p]@CV'h@;2GulBL.X%g<M8dPp(k:-p8.T/gLg%>:q2g.G*-;AZH\B`3kll*fTda%5;UbJ6^nR5N:p_mP*;(T1i5P(B'K)!E!,uMV)o6oZ,Yg"#"aZMO]A*R%I&tIZkfc585=^C),,s/^9sWB[1uMU[/aFrEc#Y8`ql,7%OSM]!J?-Tm:=,(gIYp@5cU]7V&h;Oq5pm2"QaK-&*$H^sEXFYo=A^[e,Wg!K>DA#91Y>TlCMWf$f%9rK>XMD8X5dZIQ9Il@j[tVW%8>G3SX75a:'ZOP":fL"%W\$tnW&Z"XQ5f!ajtp`AI"W]W*>.ig,Z!<9/X;]_LEXs-:bbpj$<3,1Gq*!.Mm%AB`Q$95'[:N"KiF>&%*!;]g?!=%p'9@['K4=6!'dmf`%rCa*F\5Q&U@ZG3`,t4_,S%4Rnnb/g!bD#AXBBL_SE'EERsScQ<\d8+]`@.\`]-t!A<`9ZYY-D9%1LjaSnH#qe*t9DB+L*T"QYbjK/ZJ4gnQ%LAK*<_GUk;7URknDj7m^Za83B/[4MHVPaKgB+7g%q[o!)3:*GAp!'rDdBa.#_s+IeN3%jMXUE=hLei(0"9M$lNR0/BQrg(=M-;O6]tZ\r-N@A6d/1el_9J_<3=AAdRYK)`!<t9+D_u>hb:j3;lHg;10e0$qqKR,)c3c+K9p;%#WR\:OOZTWak'C6X$'elip$9Kj't:E1YsMt]ThKp8VjMUh0-MKY=Lg`-HR@cfQ@#02dIVY)AE'4lD1&j#=bDH`![dN`UZ4ZX)_#)%UA\]HJ@Sop3Nru5@'\GD>\QLiB[c#Fb<r]F=.8S#Oc\Ai'bD`JFP=h#<]R9cqUnW!D[\!.@D.FX`B!:mjK$05NT$,N%OW6>e*!-(%nY+:fOeG6^GT]m\Y]1NN&DIMq!([UdMDK^6,(B2`%YIWsijBs^q:\DCeNrWs`k"?BU(kqH<6Ee"k/fp[7t/fAq1R.T_lN2r3aLd-%NZ[!)=L]NQGf)u4-m^oT!Re-QD8Xs0=rn0+k%p8eIFt3^!g4KFk!N8]nr2[?Xt<#G<QU8e5idEnQ]'"Z*ohC2U<s*\/JZ4cEk)RW%ZE^!=mFSre7o;>>(Z(J0hS+F:raXPmG=nj_,I?YeETd#g]hcs=Hn([_<U`>"hZk1RduMIa/i(E'[;>Wlm`V?XraL*/I<lBh'EoG=%-o*cGl$Le*fD:W<-$m6qBCH%`'ca.okiq.6\hE%(,g-4HIuUMg*F9Sk;5O>Q9o6`k0OiVK$t5<V##g%,ImR!OUeRC]L+aZP))Pha%jW*s7L/)RhPZo`TQFaN5gkW/Kk$-A0&=q+o[`ED$pqW.[oVIT(F&=kITRmUjUm!hpI$M+u3VP-l$'LO4Uh$u13=hsp>?ci><\rB+%QYUC60\4jt\lY-N<u71YS-DMCZMQ$qB\r!(clR2'K_KbOM`,!)qC>/+#2Qm[E'f0rP3bZ;QqK1j=&qSk;9?>>5an&tdN974iTWGm%b=3^#LXALo>:fNAX_b):hjj%VN=c)sb&692e*_^tkiO=/j&5DNZfl:G%'3/(+rdFN"WVY!hQe^VStdi]$4o.%Hq0cD_b9Ld_N7eC%,V,W:au\Whb[Xr.QD*)K!@I)hg/9$4qjL5Sq+jh!]pP<t>uUu^Y3<<<`7DL%(%c#J(Q]@7:g4fr5U5>X85+2%o<hgU=%?+l<0j5P%d1!J%jkAE@N:lg-+Lkk'LuO@lE46#]!PLgCXIAMj;)kGr-U(&)%*dC$S46aOD(\j:JXe6+U"&;W;@+PYTk]mOg2JGpFXS/&LmV2*%i(h7KDPbLqHhttnDOS43pt%"*SNdhDEk[i^N,U0kasNW-j/$PpnO"#3ZnOfKF*34JN]&V!D:=@na_RA]K:A&pio&U,Jn/F<;4G]3%eI(A:>63hd1RP.WCWh,ClYA#\$\J0AOI_uV9<pHbk_a8e0=FfF:r.i$o^Vo9=%9JbNKOquZ%#8@S'-L2OE4tb<&U2]QFOB3gkE#)%IX/aMYJQgrag>V/2ATo/L0HRngf[Q5@T7*$Q`JG__aB/trMGbl:bIOhDI^i31(r=UO.ld*7]I0F[?Zk4*\(sK7ME/:<"PD>jW:e:%NV2q5'AU[4$,XGX_<l"USc@N/]3H4Ko\:IYh`ghH!9*RJXbg[a:@;7O=u9@*mgR&>XHFkDCNDf6_sYs/.O16KW)^<31U,_YCWfQ%%C'Io-g=gQh`ql/&$1a]<8[,hE!i"(C'd.io`pP"4I*<MdN3a[[FMq5H*g^ZC7Fs+qNKCA1Z(k)l/j8<%e<Zf&eI8n9jkAEPN:lj.%+M2W#gGN7&FMMSJOS`3k$Sr'ir)H9kCc%L:*j0,8FAWPBW(qJMb>;ub.)BTU-u4`aOL!Ef?;a[faq]=q[>jqRgQUK$\\06k)4gfh%dT\&4f3j3PbaI->#aYZKhR4bf&o(50,oB>rASog+;RY9t9\;L*FUTeeT\)-:PYc8*!#'KDD/CB7qV"R1i_Q\m"GD-1::D?HIV?@6%7Yqa-fT<p_j="f%VNA+6emnggU"MJtbNUbY9*l>L(piCi[C(E"lg'$cHCGgJ!Nb*lM+?4_J2P3P`T^FPci@N<f8<(?,J/8TU>rW@%'1H,#j0SjeN*KQf`E'gO%'gY_>Z>=Q^]dE(gh;;JQ3uVl\_Mm<fiV%b3SBC]>S-n"b&.`>@1:H]EnO_L$lCHR__V?$>qLqR"?E!V%We2i2$(!'5cGE*pLg\?Ren4H,7q4S1,=8[k>gV;ILra6j[1uMU[/^k_\[JpWj*f22#l.72Cb<j8KN^9]r_4O3@Uo/,>?_CKCri93%Lo%Dc3elu8Xk"p72*3r^EBIsY;&uogD/C.?fT<p;>u=hk_g#Pg"0rk`EOCi.Ej\#UO[6Een?C<[ibHa."F=HP2*5f!?qCaJk#erI%W$mGr1'o+;CJ.LYWi-^?Cu@PHQ?-o!`oGFjghI46/S44)Ek,[sD.A"mk+jrK*^TR&._V>0AT[o;dX-Hs':@h\&jt5)Q0Hra$]pua%M#f18:Eu8/MGmK]`XFbX)A0$\2Rig0]ObugKgan$/3C\Uj[bMuS7K1=!m7XR?pS(uXm!Z)?aJU[$#1aZ<nJMq$S@0Wmpl+)plq(@%_1i*0N8tPTRVN"bG*F,7*\^tt8aTKT>Y)ucEbu-J[$ngs\l;n]LU"S=(/NMHj3.&/Gmr"<3)aRIa?%Xk$8o-#_S"BM_\/c;1b9Wa%r,E735Q1;Iq.s_g21%IrrZK<rk9dp%I/(kI=80jM<BKu@9i$95T7>s$i?^KIBc\;/ni?<Ub@ggWoFe??IdOlpdP>LoWFk42b4bF5%n=(2/[2Cf5At_+Sr#H-PY>;*b+<0h%-.FcC#IfJL\GmB9q@pfKU"(-Z@+<FFd]9M;,q@Yf^Hq[.n91*XP^rd%$0[JRqQ"tU?/Yee%5AA+X9#0-13d*!-r!>r`AYgqe',7kJdiPIdnf*g*FZ;LZraVdmr[OaIF"#9C7%/8YW:s`.CYYkO[PLq/BfFDM&ZGZ8(]:-@\CM]N%GlLa*LqDTb9KGlH[mZsa2&%C.]+64Im.q_DeJYoQn@D,Xb@"bN9-<mnhm>LemSLn"a3(_UPMJH+T^BX-QUP+Tnm^-EWL5&OK"ACW%\BLRpMh8/o]XdfMMF#;OTM6N_6S\A\MEs@B(IaU5K;@-gh(0b`g04#T0A(aN%8&Fh;0I1XrJ/NOq_]^_eTbQocuSjq=RJN>EDP7T%eu:^dDre,!Y]'B>Mm1>kOn_]dM$OgkqCXSh#'h%5c(dXg33u/oCS51(&I8gfdHFa>)&<@s?hRpcZoGrB8r#Ia5?"3mo/-k3'+P3"%J&ufaMRMlBP-qU^S^OF89bWcKZ?M0bLK>;l<;Cb%Saqi-J"26;at<hY"jWU!os+]q:tCNMHboXU2^m6DI<\B_B*pN>:PF:81(?^K%ar\^4s0g_na^@U9;tcAq3b`O"\)YQ=I)P\XFf=<u;l(XX^jUV\*aUui4Q7E8MJ(0.2$EKUNb`\RXPH-!P&De!h@"e]@SNgh(%7bD%e7tctZ!Uf#^E]a*DN9K=m7Z1#Z>aUKmRkVJ/_2jHHF:/o6tQ8_2^n^qcL9`:`BR9&\n^0:qqBO\"f$r:[+l[P=r3p/C=noYdo"6j%S"Q_A:OAc,jYnU4<-*:TrMN7Db?;s%2JHb.3`LmOli9b'q5<2:V3T65m'CK>08ImR^&;Af?%0PorTa&.,>2cSrX58m/_A1m_skDf%&7C&!?S%bZ])D0lX5300b?+\VI/UtVpA<H[<gSTR'BIo#+,BT/?!TY+gj]"ab.jRVhbbaRhbqu\qN?`$)X6g(qVQr*iOA[;kBugZ%Wj09hVMYN+:f%CsDX^,),pl2TrnJna]o!om$!,JVX4T5.p##Dbp[l@1"T?ZPWg8->If-!FIYej//nq3f:>qmF7j9Y:I)6,e)Iu!T%aDQs'KJc_\$Eom"nkF'3=dm0["Jj#V@t_WIIY/E/EYUJ<D8RJQ<J]NnUQtp@;DA;pen^$"QQB;Xh=;>2=lHJ`a4[I%L59T#oHO7$%W<GUHD2+#0#?Mf85mcb,XgnHpMT\OE>,\ZqKu.heG,&Q:OrBoXcgq3V(crf_8*>=d9k@5%>/ec;Me@O1-8m]N?CEt%C#o@V7"Op<%)Xka.NFY,j9+/m'JWL%%W\^17*E]N\%LQBG6IrEQR`6ACV3Qqfe]9V.h-!;c4J$o^g;X>Cnj]/t1Au=\l8,3-9pr`Jq"^qMWjZ<"%bTSnN=scoG!B&H[&[L+HA::ZoElKi5"=b>nV!0-FG:g^J)A^O6Jim\X#NTW<V$Wb:'C`FW@n*t:#(cck`FuDCW)4V#fKnH.,n)fW%?QqY9d=P4oRYr'&K7\l3Gq-$O[uZbV=./i_nHniF-7.8uUuB`RXW0]fe$5fC)]ADBgaKt8js9*iQ.A\qn$kPV&&mXlF/>V!jU?f-%,EN5>k5'n\b'4eL]NQl:&S&KgU_P?6XD2MSW[jZDH!hl(`M78P:Xr\[q#FBMODP-+9cZI+N\_s]ClGH.l@`1nY^SiQ0S0b>;5":t%\$JE`cIa,+r2T>?oMnhfDe!b;O0V:[%]IjHPubpOUl\%N&<Y?G+2-2:dZ"m\@S"!';rsP`:uN9o1dR9Mngmo8OW\H*3!(8EQY)n+%)qScBD41LL&;"T"M':,AL*-`k8=XNRrTGIsMCd7rJ1;i(0\SoEc1V\f:mN@@+PL+cd,DBN\2l_gTDDQo&>sQbW5K6X>=8@res\#R%K@<MaEKq:/A:inL#[U[L`M08%4QN[A.LBr)"i:k?lo'`E<Ab2afI`.:Y]p02PY-V=-<=auXj\,5i=j=s#jFs;)]@j"k"mp@"O\R)%>d^Gs9g;)ZW#QH"1"^`5!=_6qc]AY]G\Er-!nuWkCEYOWEX9reW>oh%,j'`"8t\XR4Ge#4e$]k86-o_6W9460m#t/]eVU`'fZ<AW%j4/P6>\LRf-;TD7c3<JiNBh?N/4EL(&6d%Z)4IiN9b/6a'C:eeataYnM^"/R'geG&L1^Qr2;XV=>XOYUJ\:#W>+o#$kZ.7NCt-ss%RFY>lBd6V&G,oU+DDBt@R=3S-Qo=6-5P#Q<V/1a)OnLp41tcU[$4o<qM`IRFCa"e;mUYc76#0HteB+@%#`tJudMNm2P(@#(?/E'7%oTiWH/'[<<Q"XVd@7aHhAlc;+-"bT>,G,0W%?H..BgX)H<jICOD$$H*,cr^P81"*QJS[J\a9oU;*Kb8p+iEW3+PJN[X#0O0NER5@%^hY!)AK0OcgDGG'(dUB'"=kNWlE9(T#k:\be&:4/"D'.jW!ZPk!"$HfJV[=5@[N8qA>OR^W!o[R.4EA.UBqR0+kSV;@Q>hn_3U?t%UhDQ:/T#?9\HcV-SV*'LF9*4TToO2EoQOoAVhrn(!?("Y>Z"$L<'mt[X2%n`!?sfLYE`?sKjt-EPZs-o(2mM:o$/!3)Pi&ESZ8fo%J9%[oR&DNMC\og:f/_LIVFm*MZW:S6<AS\Jp%65NGuC54'eFAReK,o0a6CjZAi.q9=6\3N8A,"tUZt/!+rtJ*,-=:8E@5[dEfGe\%).[$/qM9>,:7bLB#Ueg\`f*5Y#crbm&@93p3K8lr-\E\N4A!q/kOW!k&OR"WhB8"Vh+RtCk7(BNX!WFdUuLu0&D_/k&Idqb<WPsq%PtifAXdQRtR0)($0i9hL"Ca*]9<+^MW"eJ*EA6GP7U(mlG%?8=5@S@`@4Ij8Q5TU5Fa54"Mlp<q]X@EX-fkQcf)hCeUntUsRP7H1%)co$6aW8A@FB-/9#&>,fd;]a2f!+^E+CM4emV4i&=@7oSGR*P(!?#F)(8b[tcQ^]WId2bt0o)G@:4SFH,Og6qJauRT:MJ(:j<Mat%Z<JGsOd;RrVK)inY)tJFgJ0ICrd:FB3R%PLSSTObU9/1:LW+>YQUti$0/[+6lMm5)_4p[)Zm?13BP.IL*@;1;gI+3*_1@LfYu!]$%$]:>c+DImR!/CuG=qsGH$[@sJ0=K6Cf:llH#('Ri_,"%@#gk=0SCVMc*)9ad]HTnOL)rl=Y?YnZKo.a0U/.0g57Q!<5mh=s;'Vu=%iM!(PA@Dqe#,mW-&<5+pY:1Sf(n;=/Whsen4cGZ:7_1%/e0Td#G=Zd,JQ/u8:Ee92fgcI-QCMEI#!RZ_b7W?3>`kPaXChfOhq6JT%UV_BlOq/6hoP?V,!MEk,.c;^_FN0&oR9%LS('ef;E`L(b.0C:tr+M<F+RfI<$DfiGE5_<e?ZY(Yj`*UFBBR;\IIR[s:c2O`qTQN7%SIoS->MiSZ?'#jO6`T^r+pCpheR`reEl,GN2<nV2<Ll!>Ha-.4iOJS8D-cA,;,bltK^Wg`9gsA'/SFXa7KGMNeX\R4OP2_YVR&`h%P)^-_=JKP][e.l),>oFi6[+Xs[M^rnEfQHU.G&6&ne02L>+s";'hii=OU>qlG9[-r9i[OQN'j%t]L[C(E/m@J8T!>1+sj[R6+pR"%4BQ(hCDSG(8o.UDOn(1>F$#;@(_ZS`@Zchb)n4D,*,Jqq0ul^D9#r!1FOC3J9.eR`>$bj(.[Y]bSOT"?b+0"JZSVPjWk_aBM^`Bj%X@G9t[o:sZ9tHS3j_/qmW0k3.`_<_GJ7Z\uEL=&9W*7QP7F^pZP%s-hfj6Au=o<Obk?^tN'+g8hM8r_Z*JeF43r9hg^fbkCCF8Wq%Pq+g_CF2kV4WL#&boD\>V-*YYiYcU(H"79oO10kZ_di!\o4YcTm_"IXD1p8]O2F`%>Tf</M:PIcJtW:SSM*9rW`\EHg?8t!n-mLB%7VHS:+Kd;^HN8>&eT+G]BBT'+BG**Sb,H/^G"pO!/b,KO'L+W\?ng5C'e,MmlY+2FkdEc`6'L_BD.Gm%n('sPb%Y\&\l2gfUf$qC%@5s2`ZWpOc$SL1N1dYD>-#me4gkE2Fd@SWIE!N0/J-$tiTBU1$_u2L'B.a^B-("j0nTce?IQhPV->?LfBKf0KD:*_fI%;#3EmonE%XW(e'+6<X6a=8''>>DslPZ58pAh+%O1ob>ji@:u&,:q0#_jY>X#[!<:jfE2d5Arhi;OT:;B.oWu3QHjPJ,!u1&B;ejQaAb(&!np*%_O_f=X22L,:'Ykp5=-.kBS)7V&jBfh2VB-mfF`]H*3IYs(Q^6FOE>=-3i*DOQaGXRFV%<kBDB(Sj&;mZk*d2'QQtB"QOR![g)+q^%4rGJQ3G`+f.`;AU@V%2a>D?ATB%_<oqC7N3;4_<g8hN$^@,ftGO.F1U?+'SDX"EuMV]g>fMj7D89ViKlT[4o2P*BXf0G^DG9s@=m%U$!]?)VZ^<E8-_>U(+Fn6NsqTBZ6uN<9Bj9\PAV+&oK)Ng2a_/%`^9<gsc4hE&DNkZmocjKm;LP2(LL0W,Z*t%[C?c1:T<08,GlL%">EcaO`E8bZq8=40ESL]LRG@Sg;%Y%U0S^C4U*s>/sh3f3J<@;`;QM1iaPs)Lf>c!%RZmb_\9$6P_7;=.[HW7b>9)Z<P+^A_gQ&9%/NgDGGifT/g/>#t_OCb[W=VD$n6eV`Fg2Xi\-o!*Z;m3'B"GlUolAC:Co)Cdk/['VWQ'&V_RLcVFeq]l=_6'eXMLHAa\qE7pT\eN%]i]&P<&:E3fr[PlDKLkm1mIZoe$7Go@!%i<.SWNRl@oUf3;Q)@?<,1I#'b6cP1F-3d(6EMaNBCI/:q!3Z3<Y:9KJ4)-#a%hd1gSS%Zn!:Z./ELL!c&e!M*FCuWTn._Us6"*5e%8@/5N)NiZ&Z^ZJqt*Y3F/Zgg[5M.RC,8f!YPZL"7n05e#35_X,5-TV,fc>r>C;2VH,A%%:J3THD.,**JoZhI.DEkA??U@.oR(S/S9<BC=aod+9P(!QOc1i):GhdaJT?GiP$%oil7F#5,d+0UO](lgKH'mp)R&dIp]%;,g43F%'uG*ZN?kL4ALYhQ($CC,]11,2b<f!+nDL8*[9Kjmhr8cDRY.'m+U),Of)(3I:k0JG>QLNKQo;,3P_0QCr.*MT8r-]::D:fuT6@cH%%5Q5^:9+uDVjY-)>jas`gK7gf3:X7gdMe"s7gUB7\_(PO*8MmX<tEsO[QSaC$_G8L:X&:s:%aMcFKGWUSQhY0$.=*!7l<3GM'#PJ%ZHUtF#B!utMti)>Ysd!.;BiJH3<dIO=A6Oi,6JCF8_LX)@ns1QL0RgPeYIdd_,mt[ZX`AKQE,ZI?Ya"6>MQ=lg3YD##:!lMmBnlY%W.qo#>K[?b>:]X-:n-(>,:IT5Kg<K9E4TbKEiKbi:tE=;Y-t?3J`RK`WD&;sK`[3;>o0:G%<pWA<ht<J!OQ\X_j-lH*pKQ)lV9Hb%h!u&u?mG9ks,i_U)0`lJE%>?s4!iJCFWdWr[q)lVbR33mqALJV\ZT*@&o!\I3osUeD<1k$eV/mSbb/MPTs?Fa21TUUd:e2D,SP0s%>j_WOIQY'6IICon)TuDfV3\dC!GSgi7Rf7f;:l!!+`6JlD;:3l5JeJOb)1sj/dJlL;M><A.V\M_E7)eA!4)fZ40nXAp4L=Xbb+W]%n@$\-Jh;]!cu,Z;K^Cke8`=601U9<1#h@a"VW!H.6?7Br^'ioNb-;Id!>bVN)j!BK@coW97A8r',oCcD4<>Epl\.kD4PcOm&e?;0%NKj%A?aPR_0ESXCGSc>(2VPR4d:8j@dH8P#\;!YB:22D^ef"lpD+guNjMA#mFiueDi8r?&SM8GiU"-s[HJ:%rdD5jHhVnmY`$sU'%-).=EBXFd67gE[Uf"NS+AYqs<]Ou2H%aN:"lMpU$"j'NW0_>MJ%c)6!fT$oS);)e-%a[YA0E_>2/HaTp:R:A1KX-#KCeL)S-Ws'4%@oX!K/Yjh##ZOgSHkbc%XA\6>O<^QXG^5Q+"MZ'Z&g$]5b/p4aE1"^;_XWCYlZ1stoj[u+]E)E![@Kc+6B&Eb-:]B#+@mAMM0F3#%KiM8PQ#?"`-/\n`&"#Wj3+ur'i>p$MG!!aog=^')UuO<oMq17V`9aC.#CC816l>'l4p,L\+8+k!#QC\+*#S#I;[!&gLQ`$O>b/e%%8r^FMM',>QUPL-(m;VZ3\!@qO+J`eb@n+JK.uPYAO=f>);etd3!#BMJL\/3B.F%@BGF$lI;LHnT](Hs)Mcmm()+S!)UfB/9LrnW&%%cD4k.3h'&i(a'aCj53F5n_[I8Y@"^ok(gd#&S]Uk*FV^\WmF3QA)dg$#5t$h&q-T`M5nl/^!9ko$E,o)3hfkroa_=o?JYdO2_`f%gd*kSlHLoC7dUsA6Gri]B'<^s9GfX:P0^SY.(#CA?#kGI9s9W)`&`^hHS$T*psm';9,rpc!#,slr/If$.]u=6XB?>58tg(s&-eit%%N\0_geOMA$&B!D+o?NcAXT[qTZg"!P89t2Hd$02pHsNs3VbOgd2`''np8tdF*[[ma/isLeDcl":3kO%e>h?fNu,=1`P<=LMp(7T%lcc8?ONbFR-KdOuLUq5o9k3lnZt_+cq@CV]6I+n-SLq-@]$uN.0UD?BT?I-3;VCZ>lYZNH^OH'oh-Y&\lgO4_I=9*5_"L]U3Sj,X%j4E%64$C<lr;e+'Gk:P&rPoF%IfV+c0f/~>%AI9_PrivateDataEnd